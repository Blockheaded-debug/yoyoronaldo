{"file_contents":{"design_guidelines.md":{"content":"# Signal Trading App Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from professional trading platforms like TradingView, Binance, and Coinbase Pro, combined with modern fintech aesthetics from companies like Robinhood and Stripe.\n\n**Key Design Principles:**\n- Data-first hierarchy with clear visual emphasis on trading signals\n- Professional, trustworthy aesthetic suitable for financial applications\n- Efficient information density without overwhelming users\n- Strong contrast for critical trading information (BUY/SELL/HOLD signals)\n\n## Core Design Elements\n\n### A. Color Palette\n**Dark Mode Primary (Trading Focus):**\n- Background: 220 15% 8% (deep charcoal)\n- Surface: 220 12% 12% (elevated cards)\n- Primary: 174 100% 40% (neon lightning glow dark tosca green for profits/buy signals)\n- Danger: 0 84% 60% (clear red for sell signals)\n- Warning: 38 92% 50% (amber for hold/neutral signals)\n- Text Primary: 220 15% 95% (high contrast white)\n- Text Secondary: 220 10% 70% (muted text)\n\n**Light Mode:**\n- Background: 220 20% 98% (clean white)\n- Surface: 220 15% 96% (subtle gray cards)\n- Primary: 174 100% 25% (neon lightning glow dark tosca green for accessibility)\n- Same danger/warning colors with adjusted lightness\n\n### B. Typography\n**Font Stack:** Inter via Google Fonts CDN\n- Headers: 600-700 weight, tight letter spacing\n- Body: 400-500 weight for readability\n- Data/Numbers: 500-600 weight, tabular figures for alignment\n- Critical Signals: 700 weight, larger size for prominence\n\n### C. Layout System\n**Tailwind Spacing Units:** 2, 4, 8, 12, 16\n- Micro spacing: p-2, gap-2\n- Component spacing: p-4, m-4, gap-4\n- Section spacing: p-8, my-8\n- Page margins: px-12, py-16\n\n### D. Component Library\n\n**Navigation:**\n- Fixed header with trading pair selector\n- Sidebar navigation for different analysis tools\n- Breadcrumb navigation for complex workflows\n\n**Forms:**\n- Trading pair input with autocomplete\n- Time frame selectors (1H, 4H, 1D, 1W buttons)\n- Analysis trigger buttons with loading states\n\n**Data Displays:**\n- Signal cards with color-coded backgrounds (green/red/amber)\n- Technical indicator tables with zebra striping\n- Price charts with overlay indicators\n- Real-time price tickers\n\n**Cards & Containers:**\n- Elevated cards for analysis results\n- Bordered containers for form sections\n- Full-width dashboard layouts\n\n**Interactive Elements:**\n- Primary buttons for trading actions\n- Ghost buttons for secondary actions\n- Toggle switches for indicator selections\n- Dropdown selectors for market pairs\n\n### E. Trading-Specific Enhancements\n\n**Signal Visualization:**\n- Large, prominent signal badges (BUY/SELL/HOLD)\n- Color-coded indicator cards with trend arrows\n- Confidence percentage displays\n- Historical signal accuracy metrics\n\n**Dashboard Layout:**\n- Multi-column grid for various indicators\n- Sticky header with current pair information\n- Quick access toolbar for common trading pairs\n- Real-time status indicators\n\n**Data Tables:**\n- Sortable columns for historical analysis\n- Color-coded rows based on signal strength\n- Expandable rows for detailed indicator breakdown\n- Export functionality for analysis results\n\n## Images\nNo large hero images required. This is a utility-focused trading application where data visualization takes precedence. Any imagery should be:\n- Small logo/branding in header\n- Icon-based illustrations for empty states\n- Chart thumbnails for analysis previews\n- Subtle background patterns for visual interest without distraction\n\n## Accessibility & Usability\n- High contrast ratios for critical trading information\n- Consistent dark mode implementation across all components\n- Keyboard navigation for power users\n- Screen reader friendly data tables\n- Clear visual hierarchy for rapid information scanning\n- Mobile-responsive layouts for monitoring on-the-go\n\nThe design should feel professional, trustworthy, and efficient - prioritizing quick access to trading signals while maintaining visual clarity for complex financial data.","size_bytes":4026},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        warning: {\n          DEFAULT: \"hsl(38 92% 50% / <alpha-value>)\",\n          foreground: \"hsl(38 92% 5% / <alpha-value>)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4190},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5000',\n        changeOrigin: true,\n        secure: false,\n      },\n    },\n  },\n});\n","size_bytes":1108},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\n// Make database optional - only initialize if DATABASE_URL is provided\nlet pool: Pool | null = null;\nlet db: any = null;\n\nif (process.env.DATABASE_URL) {\n  pool = new Pool({ connectionString: process.env.DATABASE_URL });\n  db = drizzle({ client: pool, schema });\n} else {\n  console.warn(\"⚠️  DATABASE_URL not set - database features will be unavailable\");\n  // Provide a mock db object for development\n  db = {\n    select: () => ({ from: () => ({ where: () => Promise.resolve([]) }) }),\n    insert: () => ({ values: () => ({ onConflictDoUpdate: () => ({ returning: () => Promise.resolve([]) }) }) })\n  };\n}\n\nexport { pool, db };\n","size_bytes":853},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// CORS middleware for development\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', 'http://localhost:5173');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2531},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth, isAuthenticated } from \"./staticAuth\";\nimport { cryptoService } from \"./cryptoService\";\nimport { spawn } from \"child_process\";\nimport path from \"path\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes are now handled in staticAuth.ts\n\n  // put application routes here\n  // prefix all routes with /api\n\n  // Note: storage interface available but not needed for current functionality\n  // To enable database features, ensure DATABASE_URL environment variable is set\n\n  // Crypto Signal Analysis Route (enhanced with caching) - PROTECTED\n  app.post('/api/analyze', isAuthenticated, async (req, res) => {\n    try {\n      const { pair, timeframe = '15m' } = req.body;\n      \n      if (!pair) {\n        return res.status(400).json({ error: 'Trading pair is required' });\n      }\n\n      // Use enhanced crypto service with caching\n      const result = await cryptoService.analyzeSignal(pair, timeframe);\n      res.json(result);\n      \n    } catch (error) {\n      console.error('Analysis route error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Crypto Price Proxy Endpoints (Phase 4 enhancement)\n  \n  // Get current prices for multiple cryptocurrencies - PROTECTED\n  app.get('/api/crypto/prices', isAuthenticated, async (req, res) => {\n    try {\n      const { ids } = req.query;\n      const cryptoIds = ids ? (ids as string).split(',') : [\n        'bitcoin', 'ethereum', 'binancecoin', 'cardano', \n        'polkadot', 'chainlink', 'matic-network'\n      ];\n      \n      const prices = await cryptoService.getCurrentPrice(cryptoIds);\n      res.json(prices);\n    } catch (error) {\n      console.error('Price fetch error:', error);\n      res.status(500).json({ error: 'Failed to fetch prices' });\n    }\n  });\n\n  // Get historical data for a specific cryptocurrency - PROTECTED\n  app.get('/api/crypto/historical/:cryptoId', isAuthenticated, async (req, res) => {\n    try {\n      const { cryptoId } = req.params;\n      const { days = '7' } = req.query;\n      \n      const historicalData = await cryptoService.getHistoricalData(cryptoId, parseInt(days as string));\n      res.json(historicalData);\n    } catch (error) {\n      console.error('Historical data fetch error:', error);\n      res.status(500).json({ error: 'Failed to fetch historical data' });\n    }\n  });\n\n  // Get cache statistics for monitoring - PROTECTED\n  app.get('/api/crypto/cache-stats', isAuthenticated, (req, res) => {\n    const stats = cryptoService.getCacheStats();\n    res.json({\n      cache_size: stats.size,\n      cached_keys: stats.keys,\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Get supported trading pairs\n  app.get('/api/pairs', (req, res) => {\n    const popularPairs = [\n      'BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT',\n      'BNBUSDT', 'SOLUSDT', 'MATICUSDT', 'AVAXUSDT', 'LTCUSDT',\n      'XRPUSDT', 'ATOMUSDT', 'ALGOUSDT', 'VETUSDT', 'FILUSDT'\n    ];\n    \n    res.json({\n      pairs: popularPairs,\n      supported_timeframes: ['15m'],\n      default_timeframe: '15m',\n      crypto_api_endpoints: {\n        current_prices: '/api/crypto/prices',\n        historical_data: '/api/crypto/historical/:cryptoId',\n        cache_stats: '/api/crypto/cache-stats'\n      }\n    });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":3481},"server/storage.ts":{"content":"import {\n  users,\n  type User,\n  type UpsertUser,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  // Other operations\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Other operations\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":1099},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n","size_bytes":1097},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport LandingPage from \"@/components/LandingPage\";\nimport LoginForm from \"@/components/LoginForm\";\nimport AuthenticatedApp from \"@/components/AuthenticatedApp\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading ? (\n        <Route path=\"*\">\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n              <p className=\"text-muted-foreground\">Loading...</p>\n            </div>\n          </div>\n        </Route>\n      ) : isAuthenticated ? (\n        <Route path=\"/\" component={AuthenticatedApp} />\n      ) : (\n        <>\n          <Route path=\"/\" component={LandingPage} />\n          <Route path=\"/login\">\n            <LoginForm />\n          </Route>\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1534},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 20% 98%;\n\n  --foreground: 220 25% 15%;\n\n  --border: 220 15% 88%;\n\n  --card: 220 15% 96%;\n\n  --card-foreground: 220 25% 15%;\n\n  --card-border: 220 15% 92%;\n\n  --sidebar: 220 15% 94%;\n\n  --sidebar-foreground: 220 25% 15%;\n\n  --sidebar-border: 220 15% 90%;\n\n  --sidebar-primary: 174 100% 25%;\n\n  --sidebar-primary-foreground: 174 100% 98%;\n\n  --sidebar-accent: 220 10% 88%;\n\n  --sidebar-accent-foreground: 220 25% 15%;\n\n  --sidebar-ring: 174 100% 32%;\n\n  --popover: 220 12% 92%;\n\n  --popover-foreground: 220 25% 15%;\n\n  --popover-border: 220 12% 88%;\n\n  --primary: 174 100% 25%;\n\n  --primary-foreground: 174 100% 98%;\n\n  --secondary: 220 10% 88%;\n\n  --secondary-foreground: 220 25% 15%;\n\n  --muted: 220 8% 90%;\n\n  --muted-foreground: 220 15% 45%;\n\n  --accent: 220 12% 86%;\n\n  --accent-foreground: 220 25% 15%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 220 20% 78%;\n  --ring: 174 100% 32%;\n  --chart-1: 174 100% 32%;\n  --chart-2: 38 92% 38%;\n  --chart-3: 221 83% 48%;\n  --chart-4: 262 83% 58%;\n  --chart-5: 340 82% 52%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 20% 40% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 20% 40% / 0.08);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 20% 40% / 0.08), 0px 1px 2px -1px hsl(220 20% 40% / 0.08);\n  --shadow: 0px 1px 3px 0px hsl(220 20% 40% / 0.08), 0px 1px 2px -1px hsl(220 20% 40% / 0.08);\n  --shadow-md: 0px 4px 6px -1px hsl(220 20% 40% / 0.08), 0px 2px 4px -2px hsl(220 20% 40% / 0.08);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 20% 40% / 0.08), 0px 4px 6px -4px hsl(220 20% 40% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 20% 40% / 0.08), 0px 8px 10px -6px hsl(220 20% 40% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 20% 40% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 220 15% 95%;\n\n  --border: 220 12% 16%;\n\n  --card: 220 12% 12%;\n\n  --card-foreground: 220 15% 95%;\n\n  --card-border: 220 12% 18%;\n\n  --sidebar: 220 12% 10%;\n\n  --sidebar-foreground: 220 15% 95%;\n\n  --sidebar-border: 220 12% 14%;\n\n  --sidebar-primary: 174 100% 40%;\n\n  --sidebar-primary-foreground: 174 100% 5%;\n\n  --sidebar-accent: 220 8% 16%;\n\n  --sidebar-accent-foreground: 220 15% 95%;\n\n  --sidebar-ring: 174 100% 45%;\n\n  --popover: 220 10% 14%;\n\n  --popover-foreground: 220 15% 95%;\n\n  --popover-border: 220 10% 18%;\n\n  --primary: 174 100% 40%;\n\n  --primary-foreground: 174 100% 5%;\n\n  --secondary: 220 8% 18%;\n\n  --secondary-foreground: 220 15% 95%;\n\n  --muted: 220 6% 16%;\n\n  --muted-foreground: 220 10% 70%;\n\n  --accent: 220 8% 14%;\n\n  --accent-foreground: 220 15% 95%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 5%;\n\n  --input: 220 15% 22%;\n  --ring: 174 100% 45%;\n  --chart-1: 174 100% 50%;\n  --chart-2: 38 92% 58%;\n  --chart-3: 221 83% 68%;\n  --chart-4: 262 83% 72%;\n  --chart-5: 340 82% 68%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 50% 2% / 0.25);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 50% 2% / 0.35);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 50% 2% / 0.35), 0px 1px 2px -1px hsl(220 50% 2% / 0.35);\n  --shadow: 0px 1px 3px 0px hsl(220 50% 2% / 0.35), 0px 1px 2px -1px hsl(220 50% 2% / 0.35);\n  --shadow-md: 0px 4px 6px -1px hsl(220 50% 2% / 0.35), 0px 2px 4px -2px hsl(220 50% 2% / 0.35);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 50% 2% / 0.35), 0px 4px 6px -4px hsl(220 50% 2% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 50% 2% / 0.35), 0px 8px 10px -6px hsl(220 50% 2% / 0.35);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 50% 2% / 0.5);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9932},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AuthenticatedApp.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { TrendingUp, LogOut } from \"lucide-react\";\nimport ThemeToggle from \"./ThemeToggle\";\nimport TradingDashboard from \"./TradingDashboard\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function AuthenticatedApp() {\n  const { user, logout } = useAuth();\n\n  const handleLogout = async () => {\n    console.log(\"Logging out...\");\n    await logout();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-xl font-bold\">SignalTrader</span>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            {user && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                Welcome, <span className=\"font-medium\">{(user as any)?.firstName || (user as any)?.email || \"Trader\"}</span>\n              </div>\n            )}\n            <ThemeToggle />\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-4 py-8\">\n        <TradingDashboard />\n      </main>\n    </div>\n  );\n}","size_bytes":1844},"client/src/components/LandingPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  TrendingUp, \n  BarChart3, \n  Shield, \n  Zap, \n  Users, \n  ArrowRight,\n  CheckCircle,\n  Activity\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport ThemeToggle from \"./ThemeToggle\";\n\nexport default function LandingPage() {\n  const [, setLocation] = useLocation();\n  \n  const features = [\n    {\n      icon: <TrendingUp className=\"h-6 w-6\" />,\n      title: \"Advanced Technical Analysis\",\n      description: \"RSI, EMA, Stochastic, MACD, and Bollinger Bands analysis in real-time\"\n    },\n    {\n      icon: <Zap className=\"h-6 w-6\" />,\n      title: \"Real-time Signals\",\n      description: \"Get instant BUY, SELL, or HOLD signals with confidence scores\"\n    },\n    {\n      icon: <BarChart3 className=\"h-6 w-6\" />,\n      title: \"15-Minute Analysis\",\n      description: \"Optimized 15-minute timeframe analysis for precise trading signals\"\n    },\n    {\n      icon: <Shield className=\"h-6 w-6\" />,\n      title: \"Risk Management\",\n      description: \"Confidence indicators help you make informed trading decisions\"\n    }\n  ];\n\n  const testimonials = [ //todo: remove mock functionality\n    {\n      name: \"Alex Chen\",\n      role: \"Day Trader\",\n      content: \"The accuracy of signals has improved my trading results by 40%. Love the clean interface!\"\n    },\n    {\n      name: \"Sarah Miller\",\n      role: \"Crypto Investor\",\n      content: \"Finally, a platform that combines multiple indicators into clear, actionable signals.\"\n    },\n    {\n      name: \"Mike Johnson\",\n      role: \"Technical Analyst\",\n      content: \"Professional-grade analysis with an intuitive design. Exactly what I needed.\"\n    }\n  ];\n\n  const stats = [ //todo: remove mock functionality\n    { label: \"Active Users\", value: \"10,000+\", icon: <Users className=\"h-5 w-5\" /> },\n    { label: \"Signals Generated\", value: \"500K+\", icon: <Activity className=\"h-5 w-5\" /> },\n    { label: \"Average Accuracy\", value: \"78%\", icon: <TrendingUp className=\"h-5 w-5\" /> },\n    { label: \"Supported Pairs\", value: \"200+\", icon: <BarChart3 className=\"h-5 w-5\" /> }\n  ];\n\n  const handleLogin = () => {\n    console.log(\"Navigating to login...\");\n    setLocation(\"/login\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold\">SignalTrader</span>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <ThemeToggle />\n            <Button onClick={handleLogin} data-testid=\"button-login\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto text-center space-y-8\">\n          <div className=\"space-y-4\">\n            <Badge variant=\"outline\" className=\"text-sm px-4 py-2\">\n              <Activity className=\"h-4 w-4 mr-2\" />\n              Live Trading Signals\n            </Badge>\n            <h1 className=\"text-4xl md:text-6xl font-bold tracking-tight\">\n              Professional Crypto\n              <span className=\"text-primary\"> Signal Analysis</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Advanced technical analysis powered by multiple indicators. \n              Get clear BUY, SELL, and HOLD signals with confidence scores.\n            </p>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" onClick={handleLogin} className=\"text-lg px-8 py-6\" data-testid=\"button-get-started\">\n              Sign In\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 pt-12\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-2 text-primary mb-2\">\n                  {stat.icon}\n                  <span className=\"text-2xl font-bold\">{stat.value}</span>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 bg-muted/30\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold\">Powerful Trading Features</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need for professional technical analysis in one platform\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"hover-elevate\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg text-primary\">\n                      {feature.icon}\n                    </div>\n                    <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How it Works */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold\">How It Works</h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Simple 3-step process to get professional trading signals\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {[\n              {\n                step: \"01\",\n                title: \"Select Trading Pair\",\n                description: \"Choose from popular crypto pairs or enter your custom pair\"\n              },\n              {\n                step: \"02\", \n                title: \"Get Analysis\",\n                description: \"Receive professional 15-minute timeframe analysis instantly\"\n              },\n              {\n                step: \"03\",\n                title: \"Get Signal\",\n                description: \"Receive clear BUY, SELL, or HOLD signals with confidence scores\"\n              }\n            ].map((item, index) => (\n              <div key={index} className=\"text-center space-y-4\">\n                <div className=\"w-16 h-16 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xl font-bold mx-auto\">\n                  {item.step}\n                </div>\n                <h3 className=\"text-xl font-semibold\">{item.title}</h3>\n                <p className=\"text-muted-foreground\">{item.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 px-4 bg-muted/30\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold\">What Traders Say</h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Join thousands of successful traders using our platform\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"hover-elevate\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-1\">\n                      {[...Array(5)].map((_, i) => (\n                        <CheckCircle key={i} className=\"h-4 w-4 text-primary\" />\n                      ))}\n                    </div>\n                    <p className=\"text-muted-foreground italic\">\n                      \"{testimonial.content}\"\n                    </p>\n                    <div>\n                      <div className=\"font-semibold\">{testimonial.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{testimonial.role}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto text-center space-y-8\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-3xl md:text-4xl font-bold\">\n              Ready to Start Trading Smarter?\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Join professional traders who rely on our signals for better trading decisions\n            </p>\n          </div>\n          \n          <Button size=\"lg\" onClick={handleLogin} className=\"text-lg px-8 py-6\" data-testid=\"button-cta\">\n            Sign In\n            <ArrowRight className=\"ml-2 h-5 w-5\" />\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-12 px-4\">\n        <div className=\"container mx-auto text-center text-muted-foreground\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <div className=\"w-6 h-6 bg-primary rounded flex items-center justify-center\">\n              <TrendingUp className=\"h-4 w-4 text-primary-foreground\" />\n            </div>\n            <span className=\"font-semibold\">SignalTrader</span>\n          </div>\n          <p className=\"text-sm\">\n            © 2024 SignalTrader. Professional crypto trading signals platform.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":10695},"client/src/components/SignalDisplay.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, TrendingDown, Minus, AlertTriangle } from \"lucide-react\";\nimport { cn, formatCryptoPrice } from \"@/lib/utils\";\n\nexport type SignalType = \"BUY\" | \"SELL\" | \"HOLD\";\n\nexport interface TechnicalIndicator {\n  name: string;\n  value: number;\n  signal: SignalType;\n  description: string;\n}\n\nexport interface SignalData {\n  pair: string;\n  timeframe: string;\n  overallSignal: SignalType;\n  confidence: number;\n  currentPrice: number;\n  priceChange24h: number;\n  indicators: TechnicalIndicator[];\n  timestamp: string;\n  reason?: string;\n}\n\ninterface SignalDisplayProps {\n  data: SignalData;\n}\n\nexport default function SignalDisplay({ data }: SignalDisplayProps) {\n  const getSignalIcon = (signal: SignalType) => {\n    switch (signal) {\n      case \"BUY\":\n        return <TrendingUp className=\"h-4 w-4\" />;\n      case \"SELL\":\n        return <TrendingDown className=\"h-4 w-4\" />;\n      case \"HOLD\":\n        return <Minus className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getSignalColor = (signal: SignalType) => {\n    switch (signal) {\n      case \"BUY\":\n        return \"bg-primary text-primary-foreground\";\n      case \"SELL\":\n        return \"bg-destructive text-destructive-foreground\";\n      case \"HOLD\":\n        return \"bg-warning text-warning-foreground\";\n    }\n  };\n\n  const getSignalTextColor = (signal: SignalType) => {\n    switch (signal) {\n      case \"BUY\":\n        return \"text-primary\";\n      case \"SELL\":\n        return \"text-destructive\";\n      case \"HOLD\":\n        return \"text-warning\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main Signal Card */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <span className=\"font-mono\">{data.pair}</span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {data.timeframe}\n              </Badge>\n            </CardTitle>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-muted-foreground\">Last updated</div>\n              <div className=\"text-xs text-muted-foreground\">{data.timestamp}</div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Price Information */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <div className=\"text-sm text-muted-foreground\">Current Price</div>\n              <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-current-price\">\n                {formatCryptoPrice(data.currentPrice)}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-sm text-muted-foreground\">24h Change</div>\n              <div className={cn(\n                \"text-2xl font-bold flex items-center gap-1\",\n                data.priceChange24h >= 0 ? \"text-primary\" : \"text-destructive\"\n              )} data-testid=\"text-price-change\">\n                {data.priceChange24h >= 0 ? \n                  <TrendingUp className=\"h-5 w-5\" /> : \n                  <TrendingDown className=\"h-5 w-5\" />\n                }\n                {data.priceChange24h >= 0 ? \"+\" : \"\"}{data.priceChange24h.toFixed(2)}%\n              </div>\n            </div>\n          </div>\n\n          {/* Overall Signal */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Overall Signal</h3>\n              <Badge \n                className={cn(\"text-lg px-4 py-2\", getSignalColor(data.overallSignal))}\n                data-testid={`badge-signal-${data.overallSignal.toLowerCase()}`}\n              >\n                <span className=\"flex items-center gap-2\">\n                  {getSignalIcon(data.overallSignal)}\n                  {data.overallSignal}\n                </span>\n              </Badge>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Confidence Level</span>\n                <span className=\"font-semibold\">{data.confidence}%</span>\n              </div>\n              <Progress \n                value={data.confidence} \n                className=\"h-3\"\n                data-testid=\"progress-confidence\"\n              />\n              {data.confidence < 60 && (\n                <div className=\"flex items-center gap-2 text-sm text-warning\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  Low confidence - consider waiting for stronger signals\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Technical Indicators */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Technical Indicators</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4\">\n            {data.indicators.map((indicator, index) => (\n              <div \n                key={index} \n                className=\"flex items-center justify-between p-4 rounded-lg border hover-elevate\"\n                data-testid={`indicator-${indicator.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3\">\n                    <h4 className=\"font-medium\">{indicator.name}</h4>\n                    <Badge \n                      variant=\"outline\" \n                      className={cn(\"text-xs\", getSignalTextColor(indicator.signal))}\n                    >\n                      <span className=\"flex items-center gap-1\">\n                        {getSignalIcon(indicator.signal)}\n                        {indicator.signal}\n                      </span>\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {indicator.description}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-mono font-bold\">\n                    {indicator.value.toFixed(2)}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6448},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n\n  useEffect(() => {\n    // Initialize theme from localStorage or default to dark for trading platform\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initialTheme = savedTheme || \"dark\";\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n    console.log(`Theme switched to ${newTheme}`);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"hover-elevate\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":1245},"client/src/components/TradingDashboard.tsx":{"content":"import { useState } from \"react\";\nimport TradingPairSelector from \"./TradingPairSelector\";\nimport SignalDisplay, { type SignalData } from \"./SignalDisplay\";\nimport SimpleCryptoChart from \"./SimpleCryptoChart\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport { LoadingSkeleton } from \"./LoadingSkeleton\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Activity, BarChart3, Clock, TrendingUp } from \"lucide-react\";\n\nexport default function TradingDashboard() {\n  const [currentAnalysis, setCurrentAnalysis] = useState<SignalData | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [selectedChartSymbol, setSelectedChartSymbol] = useState(\"BTCUSDT\");\n\n  // Signal history tracking removed per directive - preserving core signal generation\n\n  const handleAnalyze = async (pair: string, timeframe: string) => {\n    setIsAnalyzing(true);\n    \n    try {\n      const response = await fetch('/api/analyze', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ pair, timeframe }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Analysis failed');\n      }\n      \n      const apiResult = await response.json();\n      \n      // Transform API response to match SignalData interface\n      const result: SignalData = {\n        pair: apiResult.pair,\n        timeframe: apiResult.timeframe,\n        overallSignal: apiResult.signal,\n        confidence: apiResult.confidence,\n        currentPrice: apiResult.last_price,\n        priceChange24h: apiResult.price_change_24h || 0,\n        indicators: [\n          {\n            name: \"RSI (14)\",\n            value: apiResult.indicators.rsi,\n            signal: apiResult.indicators.rsi < 30 ? \"BUY\" : apiResult.indicators.rsi > 70 ? \"SELL\" : \"HOLD\",\n            description: \"Momentum indicator showing current market conditions\"\n          },\n          {\n            name: \"EMA (12/26)\",\n            value: apiResult.indicators.ema_short,\n            signal: apiResult.indicators.ema_short > apiResult.indicators.ema_long ? \"BUY\" : \"SELL\",\n            description: \"Exponential moving average crossover analysis\"\n          },\n          {\n            name: \"Stochastic (14,3)\",\n            value: apiResult.indicators.stoch_k,\n            signal: apiResult.indicators.stoch_k < 20 ? \"BUY\" : apiResult.indicators.stoch_k > 80 ? \"SELL\" : \"HOLD\",\n            description: \"Oscillator indicating overbought/oversold conditions\"\n          },\n          {\n            name: \"MACD\",\n            value: apiResult.indicators.macd,\n            signal: apiResult.indicators.macd > apiResult.indicators.macd_signal ? \"BUY\" : \"SELL\",\n            description: \"Moving Average Convergence Divergence trend indicator\"\n          }\n        ],\n        timestamp: new Date(apiResult.timestamp).toLocaleString() + \" UTC\",\n        reason: apiResult.reason\n      };\n      \n      setCurrentAnalysis(result);\n    } catch (error) {\n      console.error('Analysis error:', error);\n      // Show error state or fallback\n      setCurrentAnalysis(null);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  // getSignalColor function removed with signal history tracking\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Dashboard Header */}\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Trading Signals Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Analyze cryptocurrency trading pairs with advanced technical indicators\n        </p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"flex items-center gap-3 p-6\">\n            <Activity className=\"h-8 w-8 text-primary\" />\n            <div>\n              <div className=\"text-2xl font-bold\">24</div>\n              <div className=\"text-sm text-muted-foreground\">Analyses Today</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"flex items-center gap-3 p-6\">\n            <TrendingUp className=\"h-8 w-8 text-primary\" />\n            <div>\n              <div className=\"text-2xl font-bold\">78%</div>\n              <div className=\"text-sm text-muted-foreground\">Avg Confidence</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"flex items-center gap-3 p-6\">\n            <BarChart3 className=\"h-8 w-8 text-primary\" />\n            <div>\n              <div className=\"text-2xl font-bold\">12</div>\n              <div className=\"text-sm text-muted-foreground\">Active Pairs</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"flex items-center gap-3 p-6\">\n            <Clock className=\"h-8 w-8 text-primary\" />\n            <div>\n              <div className=\"text-2xl font-bold\">2m</div>\n              <div className=\"text-sm text-muted-foreground\">Avg Response</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Real-Time Crypto Chart Section with Error Boundary */}\n      <div className=\"mb-8\">\n        <ErrorBoundary fallback={<LoadingSkeleton type=\"chart\" />}>\n          <SimpleCryptoChart \n            symbol={selectedChartSymbol} \n            onSymbolChange={setSelectedChartSymbol} \n          />\n        </ErrorBoundary>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Trading Pair Selector */}\n        <div className=\"lg:col-span-1\">\n          <TradingPairSelector onAnalyze={handleAnalyze} isLoading={isAnalyzing} />\n          \n          {/* Signal history tracking removed per directive */}\n        </div>\n\n        {/* Analysis Results with Error Boundary */}\n        <div className=\"lg:col-span-2\">\n          <ErrorBoundary fallback={<LoadingSkeleton type=\"signal\" />}>\n            {isAnalyzing ? (\n              <LoadingSkeleton type=\"signal\" />\n            ) : currentAnalysis ? (\n              <SignalDisplay data={currentAnalysis} />\n            ) : (\n            <Card>\n              <CardContent className=\"flex items-center justify-center h-64\">\n                <div className=\"text-center space-y-2\">\n                  <BarChart3 className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n                  <div className=\"text-lg font-medium text-muted-foreground\">\n                    Select a trading pair to begin analysis\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Choose from popular pairs or enter a custom trading pair\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            )}\n          </ErrorBoundary>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6903},"client/src/components/TradingPairSelector.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, TrendingUp } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface TradingPairSelectorProps {\n  onAnalyze: (pair: string, timeframe: string) => void;\n  isLoading?: boolean;\n}\n\nexport default function TradingPairSelector({ onAnalyze, isLoading = false }: TradingPairSelectorProps) {\n  const [selectedPair, setSelectedPair] = useState(\"BTCUSDT\");\n  const [customPair, setCustomPair] = useState(\"\");\n  const timeframe = \"15m\"; // Fixed to 15-minute timeframe\n\n  // Mock popular pairs - in real app these would come from API\n  const popularPairs = [\n    \"BTCUSDT\", \"ETHUSDT\", \"ADAUSDT\", \"DOTUSDT\", \"LINKUSDT\", \n    \"BNBUSDT\", \"SOLUSDT\", \"PEPEUSDT\", \"SHIBUSDT\", \"LTCUSDT\"\n  ];\n\n\n  const handleAnalyze = () => {\n    const pair = customPair || selectedPair;\n    onAnalyze(pair, timeframe);\n  };\n\n  const handleQuickSelect = (pair: string) => {\n    setSelectedPair(pair);\n    setCustomPair(\"\");\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <TrendingUp className=\"h-5 w-5\" />\n          Trading Pair Analysis\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Popular Pairs */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-muted-foreground\">Popular Trading Pairs</label>\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-2\">\n            {popularPairs.map((pair) => (\n              <Button\n                key={pair}\n                variant={selectedPair === pair && !customPair ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => handleQuickSelect(pair)}\n                className=\"text-xs font-mono\"\n                data-testid={`button-pair-${pair.toLowerCase()}`}\n              >\n                {pair}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Custom Pair Input */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-muted-foreground\" htmlFor=\"custom-pair\">\n            Or enter custom pair\n          </label>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              id=\"custom-pair\"\n              placeholder=\"e.g. ETHBTC, DOGEUSDT\"\n              value={customPair}\n              onChange={(e) => setCustomPair(e.target.value.toUpperCase())}\n              className=\"pl-10 font-mono\"\n              data-testid=\"input-custom-pair\"\n            />\n          </div>\n        </div>\n\n\n        {/* Analyze Button */}\n        <Button \n          onClick={handleAnalyze}\n          disabled={isLoading || (!selectedPair && !customPair)}\n          className=\"w-full\" \n          size=\"lg\"\n          data-testid=\"button-analyze\"\n        >\n          {isLoading ? \"Analyzing...\" : \"Analyze Trading Signals\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3192},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  profileImageUrl: string | null;\n  loginTime: string;\n}\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\n// Storage keys\nconst AUTH_STORAGE_KEY = \"nexus_auth_user\";\nconst AUTH_SESSION_KEY = \"nexus_auth_session\";\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize authentication state from localStorage\n  useEffect(() => {\n    try {\n      const storedUser = localStorage.getItem(AUTH_STORAGE_KEY);\n      const storedSession = localStorage.getItem(AUTH_SESSION_KEY);\n      \n      if (storedUser && storedSession) {\n        const userData = JSON.parse(storedUser);\n        const sessionData = JSON.parse(storedSession);\n        \n        // Check if session is still valid (7 days)\n        const sessionAge = Date.now() - new Date(sessionData.loginTime).getTime();\n        const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days\n        \n        if (sessionAge < maxAge) {\n          setUser(userData);\n        } else {\n          // Session expired, clear storage\n          localStorage.removeItem(AUTH_STORAGE_KEY);\n          localStorage.removeItem(AUTH_SESSION_KEY);\n        }\n      }\n      \n      // Verify session with server\n      verifySession();\n    } catch (error) {\n      console.error(\"Auth initialization error:\", error);\n      localStorage.removeItem(AUTH_STORAGE_KEY);\n      localStorage.removeItem(AUTH_SESSION_KEY);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const verifySession = async () => {\n    try {\n      const response = await fetch(\"/api/auth/user\", {\n        method: \"GET\",\n        credentials: \"include\", // Important for session cookies\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n        \n        // Update localStorage with server data\n        localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(userData));\n        localStorage.setItem(AUTH_SESSION_KEY, JSON.stringify({\n          loginTime: userData.loginTime || new Date().toISOString()\n        }));\n      } else if (response.status === 401) {\n        // Not authenticated, clear local state\n        setUser(null);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n        localStorage.removeItem(AUTH_SESSION_KEY);\n      }\n    } catch (error) {\n      console.error(\"Session verification failed:\", error);\n    }\n  };\n\n  const login = async (credentials: LoginCredentials): Promise<boolean> => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(credentials),\n        credentials: \"include\", // Important for session cookies\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        \n        if (result.success && result.user) {\n          setUser(result.user);\n          \n          // Store in localStorage with session info\n          localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(result.user));\n          localStorage.setItem(AUTH_SESSION_KEY, JSON.stringify({\n            loginTime: new Date().toISOString()\n          }));\n          \n          return true;\n        } else {\n          setError(result.message || \"Login failed\");\n          return false;\n        }\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Invalid credentials\");\n        return false;\n      }\n    } catch (error) {\n      setError(\"Network error during login\");\n      console.error(\"Login error:\", error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Call server logout endpoint\n      await fetch(\"/api/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      // Clear local state regardless of server response\n      setUser(null);\n      localStorage.removeItem(AUTH_STORAGE_KEY);\n      localStorage.removeItem(AUTH_SESSION_KEY);\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n    login,\n    logout,\n    verifySession,\n  };\n}","size_bytes":4566},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Formats cryptocurrency prices with appropriate precision\n * Handles both large prices (BTC: $115,138) and micro prices (PEPE: $0.00001054)\n * @param price - The price as a number (could be in scientific notation)\n * @param currency - The currency symbol (default: '$')\n * @returns Formatted price string\n */\nexport function formatCryptoPrice(price: number, currency: string = '$'): string {\n  // Handle zero, null, undefined, or NaN values\n  if (!price || isNaN(price) || price <= 0) {\n    return `${currency}0.00`;\n  }\n\n  // Convert scientific notation to regular number if needed\n  const numericPrice = Number(price);\n  \n  // Determine decimal places based on price magnitude\n  let decimalPlaces: number;\n  let useCompactNotation = false;\n  \n  if (numericPrice >= 1000) {\n    // Large prices: use 2 decimal places with thousands separators\n    decimalPlaces = 2;\n    useCompactNotation = false;\n  } else if (numericPrice >= 1) {\n    // Medium prices ($1-$999): use 2-4 decimal places\n    decimalPlaces = numericPrice >= 100 ? 2 : 4;\n    useCompactNotation = false;\n  } else if (numericPrice >= 0.01) {\n    // Small prices ($0.01-$0.99): use 4 decimal places\n    decimalPlaces = 4;\n    useCompactNotation = false;\n  } else if (numericPrice >= 0.0001) {\n    // Very small prices: use 6 decimal places\n    decimalPlaces = 6;\n    useCompactNotation = false;\n  } else {\n    // Micro prices: determine decimal places needed to show meaningful digits\n    // Find the first non-zero digit after decimal point\n    const str = numericPrice.toFixed(20); // Get high precision string\n    const decimalIndex = str.indexOf('.');\n    let firstNonZeroIndex = -1;\n    \n    for (let i = decimalIndex + 1; i < str.length; i++) {\n      if (str[i] !== '0') {\n        firstNonZeroIndex = i;\n        break;\n      }\n    }\n    \n    if (firstNonZeroIndex === -1) {\n      return `${currency}0.00`;\n    }\n    \n    // Show at least 2-3 significant digits after first non-zero\n    const zerosAfterDecimal = firstNonZeroIndex - decimalIndex - 1;\n    decimalPlaces = Math.min(zerosAfterDecimal + 3, 20); // Cap at 20 decimal places\n    useCompactNotation = false;\n  }\n\n  try {\n    const formatted = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: decimalPlaces,\n      maximumFractionDigits: decimalPlaces,\n      notation: useCompactNotation ? 'compact' : 'standard'\n    }).format(numericPrice);\n    \n    // Replace USD symbol with custom currency if provided\n    if (currency !== '$') {\n      return formatted.replace('$', currency);\n    }\n    \n    return formatted;\n  } catch (error) {\n    console.error('Error formatting price:', error, 'Price:', price);\n    // Fallback to basic formatting\n    return `${currency}${numericPrice.toFixed(decimalPlaces)}`;\n  }\n}\n","size_bytes":2969},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AuthenticatedApp.tsx":{"content":"import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport AuthenticatedApp from '../AuthenticatedApp';\n\n// Mock auth context for example\nconst mockQueryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n      queryFn: async ({ queryKey }) => {\n        const [url] = queryKey as [string];\n        if (url === \"/api/auth/user\") {\n          // Mock user data\n          return {\n            id: \"1\",\n            email: \"trader@example.com\",\n            firstName: \"John\",\n            lastName: \"Doe\",\n            profileImageUrl: null\n          };\n        }\n        throw new Error(`No mock data for ${url}`);\n      }\n    }\n  }\n});\n\nexport default function AuthenticatedAppExample() {\n  return (\n    <QueryClientProvider client={mockQueryClient}>\n      <TooltipProvider>\n        <AuthenticatedApp />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}","size_bytes":967},"client/src/components/examples/LandingPage.tsx":{"content":"import LandingPage from '../LandingPage';\n\nexport default function LandingPageExample() {\n  return <LandingPage />;\n}","size_bytes":117},"client/src/components/examples/SignalDisplay.tsx":{"content":"import SignalDisplay, { type SignalData } from '../SignalDisplay';\n\nexport default function SignalDisplayExample() {\n  // Mock data for demonstration\n  const mockSignalData: SignalData = {\n    pair: \"BTCUSDT\",\n    timeframe: \"1h\",\n    overallSignal: \"BUY\",\n    confidence: 78,\n    currentPrice: 43250.50,\n    priceChange24h: 2.45,\n    indicators: [\n      {\n        name: \"RSI (14)\",\n        value: 45.2,\n        signal: \"BUY\",\n        description: \"Oversold condition indicates potential buying opportunity\"\n      },\n      {\n        name: \"EMA (20/50)\",\n        value: 43100.0,\n        signal: \"BUY\",\n        description: \"Price above EMA20, bullish crossover detected\"\n      },\n      {\n        name: \"Stochastic (14,3,3)\",\n        value: 32.1,\n        signal: \"BUY\",\n        description: \"Oversold momentum, expecting reversal\"\n      },\n      {\n        name: \"MACD (12,26,9)\",\n        value: 156.7,\n        signal: \"HOLD\",\n        description: \"Neutral momentum, waiting for clear signal\"\n      },\n      {\n        name: \"Bollinger Bands\",\n        value: 42950.0,\n        signal: \"BUY\",\n        description: \"Price near lower band, potential bounce expected\"\n      }\n    ],\n    timestamp: \"2024-01-15 14:32:00 UTC\"\n  };\n\n  return <SignalDisplay data={mockSignalData} />;\n}","size_bytes":1272},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"flex items-center gap-2 p-4\">\n      <span className=\"text-sm text-muted-foreground\">Theme:</span>\n      <ThemeToggle />\n    </div>\n  );\n}","size_bytes":258},"client/src/components/examples/TradingDashboard.tsx":{"content":"import TradingDashboard from '../TradingDashboard';\n\nexport default function TradingDashboardExample() {\n  return <TradingDashboard />;\n}","size_bytes":137},"client/src/components/examples/TradingPairSelector.tsx":{"content":"import TradingPairSelector from '../TradingPairSelector';\n\nexport default function TradingPairSelectorExample() {\n  const handleAnalyze = (pair: string, timeframe: string) => {\n    console.log(`Analysis requested for ${pair} on ${timeframe}`);\n  };\n\n  return (\n    <TradingPairSelector \n      onAnalyze={handleAnalyze}\n      isLoading={false}\n    />\n  );\n}","size_bytes":356},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"flask-cors>=6.0.1\",\n    \"numpy>=2.3.3\",\n    \"pandas>=2.3.2\",\n    \"prophet>=1.1.7\",\n    \"requests>=2.32.5\",\n    \"scikit-learn>=1.7.2\",\n    \"ta>=0.11.0\",\n    \"yfinance>=0.2.65\",\n]\n","size_bytes":345},"python_backend/analyze_pair.py":{"content":"#!/usr/bin/env python3\nimport sys\nimport json\nimport requests\nimport pandas as pd\nimport numpy as np\nimport ta\nfrom ta.momentum import RSIIndicator, StochasticOscillator\nfrom ta.trend import EMAIndicator, MACD\nfrom ta.volatility import BollingerBands, KeltnerChannel\nfrom datetime import datetime, timedelta\nimport warnings\nimport base64\nimport os\nfrom typing import Tuple, Dict, Any\nimport logging\n\nwarnings.filterwarnings('ignore')\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Constants\nCANDLE_LIMIT = 50\nCHARTS_DIR = \"/tmp/charts\"\n\n# Create charts directory if it doesn't exist\nos.makedirs(CHARTS_DIR, exist_ok=True)\n\n# CoinGecko ID mapping for common trading pairs\nPAIR_TO_COINGECKO_ID = {\n    'BTCUSDT': 'bitcoin',\n    'ETHUSDT': 'ethereum',\n    'ADAUSDT': 'cardano',\n    'DOTUSDT': 'polkadot',\n    'LINKUSDT': 'chainlink',\n    'BNBUSDT': 'binancecoin',\n    'SOLUSDT': 'solana',\n    'MATICUSDT': 'polygon',\n    'AVAXUSDT': 'avalanche-2',\n    'LTCUSDT': 'litecoin',\n    'XRPUSDT': 'ripple',\n    'ATOMUSDT': 'cosmos',\n    'ALGOUSDT': 'algorand',\n    'VETUSDT': 'vechain',\n    'FILUSDT': 'filecoin',\n    'PEPEUSDT': 'pepe',\n    'SHIBUSDT': 'shiba-inu',\n    'DOGEUSDT': 'dogecoin',\n    'FLOKIUSDT': 'floki',\n    'BONKUSDT': 'bonk',\n    'WIFUSDT': 'dogwifcoin',\n}\n\ndef calculate_rsi(df: pd.DataFrame, period: int = 14) -> pd.Series:\n    \"\"\"Calculate RSI indicator\"\"\"\n    return ta.momentum.RSIIndicator(df['Close'], window=period).rsi()\n\ndef calculate_stochastic(df: pd.DataFrame, k_period: int = 14, d_period: int = 3) -> Tuple[pd.Series, pd.Series]:\n    \"\"\"Calculate Stochastic oscillator\"\"\"\n    stoch = ta.momentum.StochasticOscillator(\n        high=df['High'], \n        low=df['Low'], \n        close=df['Close'],\n        window=k_period,\n        smooth_window=d_period\n    )\n    return stoch.stoch(), stoch.stoch_signal()\n\ndef calculate_ema(df: pd.DataFrame, interval: str = '1h') -> Dict[str, float]:\n    \"\"\"Calculate EMA indicators\"\"\"\n    try:\n        # Use shorter periods if we don't have enough data\n        data_length = len(df)\n        ema100_period = min(100, max(10, data_length // 3))\n        ema200_period = min(200, max(20, data_length // 2))\n        \n        ema100 = ta.trend.EMAIndicator(df['Close'], window=ema100_period).ema_indicator()\n        ema200 = ta.trend.EMAIndicator(df['Close'], window=ema200_period).ema_indicator()\n        \n        ema100_val = float(ema100.iloc[-1]) if len(ema100) > 0 and pd.notna(ema100.iloc[-1]) else float(df['Close'].iloc[-1])\n        ema200_val = float(ema200.iloc[-1]) if len(ema200) > 0 and pd.notna(ema200.iloc[-1]) else float(df['Close'].iloc[-1])\n        \n        # Ensure we have valid values\n        if ema100_val == 0:\n            ema100_val = float(df['Close'].iloc[-1])\n        if ema200_val == 0:\n            ema200_val = float(df['Close'].iloc[-1])\n        \n        return {\n            'ema100': ema100_val,\n            'ema200': ema200_val\n        }\n    except Exception as e:\n        logger.error(f\"Error calculating EMA: {e}\")\n        # Fallback to current price\n        current_price = float(df['Close'].iloc[-1])\n        return {'ema100': current_price, 'ema200': current_price}\n\ndef calculate_keltner_channels(df: pd.DataFrame, period: int = 20, multiplier: float = 2.0) -> Tuple[float, float, float]:\n    \"\"\"Calculate Keltner Channels\"\"\"\n    try:\n        # Use shorter period if we don't have enough data\n        actual_period = min(period, max(5, len(df) // 3))\n        \n        kc = ta.volatility.KeltnerChannel(df['High'], df['Low'], df['Close'], window=actual_period, window_atr=actual_period)\n        upper = kc.keltner_channel_hband().iloc[-1] if len(kc.keltner_channel_hband()) > 0 else 0\n        basis = kc.keltner_channel_mband().iloc[-1] if len(kc.keltner_channel_mband()) > 0 else 0\n        lower = kc.keltner_channel_lband().iloc[-1] if len(kc.keltner_channel_lband()) > 0 else 0\n        \n        # If any value is invalid, use simple calculation based on current price\n        current_price = float(df['Close'].iloc[-1])\n        if upper == 0 or pd.isna(upper):\n            upper = current_price * 1.02\n        if basis == 0 or pd.isna(basis):\n            basis = current_price\n        if lower == 0 or pd.isna(lower):\n            lower = current_price * 0.98\n        \n        return float(upper), float(basis), float(lower)\n    except Exception as e:\n        logger.error(f\"Error calculating Keltner Channels: {e}\")\n        current_price = float(df['Close'].iloc[-1]) if len(df) > 0 else 100.0\n        return current_price * 1.02, current_price, current_price * 0.98\n\ndef detect_support_resistance_zones(df: pd.DataFrame, lookback: int = 20) -> Tuple[Tuple[float, float], Tuple[float, float]]:\n    \"\"\"Detect support and resistance zones\"\"\"\n    try:\n        if len(df) < lookback:\n            current_price = float(df['Close'].iloc[-1])\n            return (current_price * 0.95, current_price * 0.98), (current_price * 1.02, current_price * 1.05)\n        \n        # Find local minima and maxima\n        highs = df['High'].rolling(window=lookback).max()\n        lows = df['Low'].rolling(window=lookback).min()\n        \n        # Recent resistance and support levels\n        resistance_high = float(highs.iloc[-lookback:].max())\n        resistance_low = float(highs.iloc[-lookback:].quantile(0.8))\n        support_high = float(lows.iloc[-lookback:].quantile(0.2))\n        support_low = float(lows.iloc[-lookback:].min())\n        \n        return (support_low, support_high), (resistance_low, resistance_high)\n    except Exception as e:\n        logger.error(f\"Error detecting support/resistance: {e}\")\n        current_price = float(df['Close'].iloc[-1])\n        return (current_price * 0.95, current_price * 0.98), (current_price * 1.02, current_price * 1.05)\n\ndef fetch_current_price(symbol: str) -> float:\n    \"\"\"Fetch current price - simplified version\"\"\"\n    # This is a placeholder - in the real implementation this would fetch from an API\n    return None\n\ndef forecast_prices(df: pd.DataFrame, periods: int = 30) -> pd.DataFrame:\n    \"\"\"Prophet price forecasting - simplified version\"\"\"\n    try:\n        # Simple trend-based forecast as fallback\n        if len(df) < 10:\n            return None\n        \n        # Calculate trend\n        recent_prices = df['Close'].tail(10)\n        trend = (recent_prices.iloc[-1] - recent_prices.iloc[0]) / len(recent_prices)\n        \n        # Create simple forecast\n        forecast_data = []\n        last_price = float(recent_prices.iloc[-1])\n        \n        for i in range(periods):\n            forecast_price = last_price + trend * (i + 1)\n            forecast_data.append({\n                'yhat': forecast_price,\n                'yhat_lower': forecast_price * 0.95,\n                'yhat_upper': forecast_price * 1.05\n            })\n        \n        return pd.DataFrame(forecast_data)\n    except Exception as e:\n        logger.error(f\"Error in price forecasting: {e}\")\n        return None\n\ndef format_price(price: float, reference_price: float) -> str:\n    \"\"\"Format price for display\"\"\"\n    try:\n        if price == 0 or pd.isna(price):\n            return \"N/A\"\n        return f\"${price:.4f}\" if price < 100 else f\"${price:.2f}\"\n    except:\n        return \"N/A\"\n\ndef format_strategy_number(value: float) -> str:\n    \"\"\"Format numbers for strategy display\"\"\"\n    try:\n        if pd.isna(value):\n            return \"N/A\"\n        return f\"{value:.2f}\"\n    except:\n        return \"N/A\"\n\ndef generate_chart_snapshot(df: pd.DataFrame, symbol: str, save_path: str) -> bool:\n    \"\"\"Generate chart snapshot - simplified version\"\"\"\n    try:\n        # For now, just create a placeholder file\n        # In a full implementation, this would generate actual charts\n        with open(save_path, 'w') as f:\n            f.write(\"Chart placeholder\")\n        return True\n    except Exception as e:\n        logger.error(f\"Error generating chart: {e}\")\n        return False\n\ndef escape_markdown(text: str) -> str:\n    \"\"\"Escape markdown characters\"\"\"\n    return text.replace('*', '\\\\*').replace('_', '\\\\_').replace('`', '\\\\`')\n\ndef get_coingecko_id(symbol: str):\n    \"\"\"Convert trading pair symbol to CoinGecko ID\"\"\"\n    # Try direct mapping first\n    if symbol in PAIR_TO_COINGECKO_ID:\n        return PAIR_TO_COINGECKO_ID[symbol]\n    \n    # Try to extract base currency and convert to lowercase\n    if symbol.endswith('USDT'):\n        base_currency = symbol[:-4].lower()\n        \n        # Common mappings for meme coins and others\n        special_mappings = {\n            'pepe': 'pepe',\n            'shib': 'shiba-inu',\n            'doge': 'dogecoin',\n            'floki': 'floki',\n            'bonk': 'bonk',\n            'wif': 'dogwifcoin',\n            'btc': 'bitcoin',\n            'eth': 'ethereum',\n            'ada': 'cardano',\n            'dot': 'polkadot',\n            'link': 'chainlink',\n            'bnb': 'binancecoin',\n            'sol': 'solana',\n            'matic': 'polygon',\n            'avax': 'avalanche-2',\n            'ltc': 'litecoin',\n            'xrp': 'ripple',\n            'atom': 'cosmos',\n            'algo': 'algorand',\n            'vet': 'vechain',\n            'fil': 'filecoin',\n        }\n        \n        return special_mappings.get(base_currency, base_currency)\n    \n    return symbol.lower()\n\ndef get_coingecko_market_data(coin_id: str, days: int = 7):\n    \"\"\"Fetch market chart data from CoinGecko and convert to OHLC\"\"\"\n    try:\n        url = f\"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart\"\n        params = {\n            'vs_currency': 'usd',\n            'days': days\n            # Automatic interval based on days parameter (CoinGecko free plan)\n        }\n        \n        response = requests.get(url, params=params, timeout=10)\n        response.raise_for_status()\n        \n        data = response.json()\n        \n        if 'prices' not in data or not data['prices']:\n            return None\n        \n        # Convert prices data to DataFrame\n        prices_df = pd.DataFrame(data['prices'], columns=['timestamp', 'price'])\n        \n        if len(prices_df) < 50:\n            return None\n        \n        # Convert timestamp to datetime\n        prices_df['timestamp'] = pd.to_datetime(prices_df['timestamp'], unit='ms')\n        \n        # Create OHLC data by grouping hourly prices\n        # Since we only have price data, we'll simulate OHLC by using price movements\n        df_list = []\n        for i in range(len(prices_df)):\n            if i == 0:\n                open_price = prices_df.iloc[i]['price']\n                high_price = prices_df.iloc[i]['price']\n                low_price = prices_df.iloc[i]['price']\n                close_price = prices_df.iloc[i]['price']\n            else:\n                # Use previous close as open\n                open_price = df_list[-1]['Close'] if df_list else prices_df.iloc[i-1]['price']\n                close_price = prices_df.iloc[i]['price']\n                \n                # Simulate high/low based on price movement\n                price_change = abs(close_price - open_price)\n                volatility_factor = price_change * 0.1  # Small volatility simulation\n                \n                high_price = max(open_price, close_price) + volatility_factor\n                low_price = min(open_price, close_price) - volatility_factor\n            \n            df_list.append({\n                'timestamp': prices_df.iloc[i]['timestamp'],\n                'Open': open_price,\n                'High': high_price,\n                'Low': low_price,\n                'Close': close_price,\n                'Volume': 1000000  # Placeholder volume\n            })\n        \n        df = pd.DataFrame(df_list)\n        df.set_index('timestamp', inplace=True)\n        \n        return df[['Open', 'High', 'Low', 'Close', 'Volume']]\n        \n    except Exception as e:\n        print(f\"Error fetching CoinGecko market data for {coin_id}: {e}\", file=sys.stderr)\n        return None\n\ndef get_current_price_data(coin_id: str):\n    \"\"\"Get current price and 24h change from CoinGecko\"\"\"\n    try:\n        url = \"https://api.coingecko.com/api/v3/simple/price\"\n        params = {\n            'ids': coin_id,\n            'vs_currencies': 'usd',\n            'include_24hr_change': 'true'\n        }\n        \n        response = requests.get(url, params=params, timeout=5)\n        response.raise_for_status()\n        \n        data = response.json()\n        \n        if coin_id in data:\n            return {\n                'current_price': data[coin_id]['usd'],\n                'price_change_24h': data[coin_id].get('usd_24h_change', 0)\n            }\n        \n        return None\n        \n    except Exception as e:\n        print(f\"Error fetching current price for {coin_id}: {e}\", file=sys.stderr)\n        return None\n\n\n# === Strategy Logic with Scoring ===\ndef run_strategy(df: pd.DataFrame) -> Tuple[Dict[str, Any], bool]:\n    if df is None or len(df) < CANDLE_LIMIT:\n        return {\"signal\": \"NO SIGNAL\", \"tp\": 0, \"sl\": 0, \"chart_base64\": \"\", \"snapshot\": \"Error: Failed to fetch candle data\"}, False\n    \n    logger.info(\"Running strategy indicators...\")\n    \n    # Calculate technical indicators\n    rsi = calculate_rsi(df)\n    stoch_k, stoch_d = calculate_stochastic(df)\n    emas = calculate_ema(df, interval='1h')\n    \n    if emas is None or emas['ema100'] == 0 or emas['ema200'] == 0:\n        return {\"signal\": \"NO SIGNAL\", \"tp\": 0, \"sl\": 0, \"chart_base64\": \"\", \"snapshot\": \"Error: Invalid EMA data\"}, False\n    \n    upper_kc, basis_kc, lower_kc = calculate_keltner_channels(df)\n    if upper_kc == 0 or lower_kc == 0:\n        return {\"signal\": \"NO SIGNAL\", \"tp\": 0, \"sl\": 0, \"chart_base64\": \"\", \"snapshot\": \"Error: Invalid Keltner data\"}, False\n    \n    support_zone, resistance_zone = detect_support_resistance_zones(df)\n    current_price = fetch_current_price(df.name) or df['Close'].iloc[-1]\n    \n    # Volume analysis removed - no longer needed\n    \n    # Signal conditions\n    rsi_crossover = rsi.iloc[-1] > 50 and rsi.iloc[-2] <= 50\n    rsi_crossunder = rsi.iloc[-1] < 50 and rsi.iloc[-2] >= 50\n    stoch_crossover = stoch_k.iloc[-1] > 20 and stoch_k.iloc[-2] <= 20\n    stoch_crossunder = stoch_k.iloc[-1] < 80 and stoch_k.iloc[-2] >= 80\n    \n    # Bullish/Bearish conditions (loosened criteria)\n    bullish_rsi = rsi_crossover or rsi.iloc[-1] > 52  # Lowered from 56\n    bearish_rsi = rsi_crossunder or rsi.iloc[-1] < 48  # Raised from 46\n    bullish_stoch = stoch_k.iloc[-1] > 20 and (stoch_crossover or stoch_k.iloc[-1] > 45)  # Lowered from 50\n    bearish_stoch = stoch_k.iloc[-1] < 80 and (stoch_crossunder or stoch_k.iloc[-1] < 55)  # Raised from 50\n    bullish_price = current_price > basis_kc * 1.001  # More lenient than upper Keltner\n    bearish_price = current_price < basis_kc * 0.999  # More lenient than lower Keltner\n    bullish_ema = emas['ema100'] > emas['ema200'] * 1.001  # EMA100 above EMA200 by 0.1%\n    bearish_ema = emas['ema100'] < emas['ema200'] * 0.999  # EMA100 below EMA200 by 0.1%\n    \n    # Additional momentum indicators for better distribution\n    price_momentum = (current_price - df['Close'].iloc[-20]) / df['Close'].iloc[-20] * 100  # 20-period momentum\n    bullish_momentum = price_momentum > 1.0  # Positive 20-period momentum\n    bearish_momentum = price_momentum < -1.0  # Negative 20-period momentum\n    \n    # Overbought/Oversold conditions\n    not_overbought = rsi.iloc[-1] < 70 and stoch_k.iloc[-1] < 80\n    not_oversold = rsi.iloc[-1] > 30 and stoch_k.iloc[-1] > 20\n    \n    # Score calculation (6 indicators now for better distribution)\n    bullish_points = sum([bullish_rsi, bullish_stoch, bullish_price, bullish_ema, bullish_momentum])\n    bearish_points = sum([bearish_rsi, bearish_stoch, bearish_price, bearish_ema, bearish_momentum])\n    confidence = max(bullish_points, bearish_points) / 5 * 100  # 5 total indicators\n    \n    # Signal generation\n    signal_type = \"NO SIGNAL\"\n    sl = tp = None\n    \n    # Strong signal conditions (loosened)\n    if bullish_price and bullish_ema and bullish_momentum:\n        signal_type = \"BUY\"\n        confidence = max(70, confidence)  # Lowered from 75\n        sl = min(support_zone[0], current_price * 0.985)  # Tighter SL\n        tp = max(resistance_zone[1], current_price * 1.015)  # Tighter TP\n    elif bearish_price and bearish_ema and bearish_momentum:\n        signal_type = \"SELL\"\n        confidence = max(70, confidence)  # Lowered from 75\n        sl = max(resistance_zone[1], current_price * 1.015)  # Tighter SL\n        tp = min(support_zone[0], current_price * 0.985)  # Tighter TP\n    # Medium signal conditions (loosened)\n    elif bullish_points >= 2 and not_overbought:  # Lowered from 3\n        signal_type = \"BUY\"\n        sl = min(support_zone[0], current_price * 0.98)\n        tp = max(resistance_zone[1], current_price * 1.02)\n    elif bearish_points >= 2 and not_oversold:  # Lowered from 3\n        signal_type = \"SELL\"\n        sl = max(resistance_zone[1], current_price * 1.02)\n        tp = min(support_zone[0], current_price * 0.98)\n    \n    # Prophet forecast integration\n    if signal_type != \"NO SIGNAL\":\n        forecast = forecast_prices(df, periods=30)\n        if forecast is not None:\n            forecast_tp = float(forecast['yhat'].quantile(0.75)) if signal_type == \"BUY\" else float(forecast['yhat'].quantile(0.25))\n            forecast_sl = float(forecast['yhat_lower'].min()) if signal_type == \"BUY\" else float(forecast['yhat_upper'].max())\n            \n            if signal_type == \"BUY\":\n                sl = min(forecast_sl, support_zone[0], current_price * 0.98)\n                tp = max(forecast_tp, resistance_zone[1], current_price * 1.02)\n            else:\n                sl = max(forecast_sl, resistance_zone[1], current_price * 1.02)\n                tp = min(forecast_tp, support_zone[0], current_price * 0.98)\n    \n    # Risk-reward ratio adjustment\n    if signal_type != \"NO SIGNAL\":\n        risk = abs(current_price - sl)\n        reward = abs(tp - current_price)\n        if risk > 0 and reward / risk < 1.5:\n            if signal_type == \"BUY\":\n                tp = current_price + risk * 1.5\n            else:\n                tp = current_price - risk * 1.5\n    \n    # Format prices and generate analysis\n    current_price_str = format_price(current_price, current_price)\n    sl_str = \"N/A\" if signal_type == \"NO SIGNAL\" else format_price(sl, current_price)\n    tp_str = \"N/A\" if signal_type == \"NO SIGNAL\" else format_price(tp, current_price)\n    \n    signal_status = \"🟢 BUY\" if signal_type == \"BUY\" else \"🔴 SELL\" if signal_type == \"SELL\" else \"🟡 NO SIGNAL\"\n    \n    # Technical analysis summary\n    rsi_trend = \"Bullish Trend\" if bullish_rsi else \"Bearish Trend\"\n    stoch_trend = \"Bullish Trend\" if bullish_stoch else \"Bearish Trend\"\n    \n    # Fixed EMA display - simple comparison\n    if bullish_ema:\n        ema_trend = \"EMA100 Higher (Bullish)\"\n    elif bearish_ema:\n        ema_trend = \"EMA200 Higher (Bearish)\"\n    else:\n        ema_trend = \"EMAs Neutral\"\n    \n    keltner_status = f\"{'Above Upper' if current_price > upper_kc else 'Below Lower' if current_price < lower_kc else 'Within'} range: Upper {format_price(upper_kc, current_price)}, Lower {format_price(lower_kc, current_price)}\"\n    momentum_status = f\"20-Period: {price_momentum:+.2f}% ({'Bullish' if bullish_momentum else 'Bearish' if bearish_momentum else 'Neutral'})\"\n    confidence_status = f\"{confidence:.1f}% ({'High' if confidence >= 70 else 'Medium' if confidence >= 50 else 'Low'})\"\n    support_zone_str = f\"{format_price(support_zone[0], current_price)} → {format_price(support_zone[1], current_price)}\"\n    resistance_zone_str = f\"{format_price(resistance_zone[0], current_price)} → {format_price(resistance_zone[1], current_price)}\"\n    \n    analysis_section = (\n        f\"\\n*📊 TRADING SIGNAL ANALYSIS*\\n\"\n        f\"```\\n\"\n        f\"{'Indicator':<20} {'Value':<60}\\n\"\n        f\"{'🔹 RSI':<20} {format_strategy_number(rsi.iloc[-1]):<10} → {rsi_trend:<40}\\n\"\n        f\"{'🔹 Stochastic':<20} %K {format_strategy_number(stoch_k.iloc[-1])}, %D {format_strategy_number(stoch_d.iloc[-1])} → {stoch_trend:<40}\\n\"\n        f\"{'🔹 EMA Trend':<20} {ema_trend:<60}\\n\"\n        f\"{'🔹 Keltner':<20} {keltner_status:<60}\\n\"\n        f\"{'🔹 Momentum':<20} {momentum_status:<60}\\n\"\n        f\"{'🔹 Confidence':<20} {confidence_status:<60}\\n\"\n        f\"{'🔹 Support Zone':<20} {support_zone_str:<60}\\n\"\n        f\"{'🔹 Resistance Zone':<20} {resistance_zone_str:<60}\\n\"\n        f\"```\\n\"\n    )\n    \n    # Breakout scenario simulation (when NO SIGNAL)\n    breakout_summary = \"\"\n    if signal_type == \"NO SIGNAL\":\n        logger.info(f\"Simulating breakout scenarios for {df.name}\")\n        \n        # Create copies for simulation\n        df_bullish = df.copy()\n        df_bearish = df.copy()\n        \n        # Simulate bullish breakout\n        df_bullish.iloc[-1, df_bullish.columns.get_loc('Close')] = resistance_zone[1] * 1.01\n        df_bullish.iloc[-1, df_bullish.columns.get_loc('High')] = max(df_bullish.iloc[-1]['High'], resistance_zone[1] * 1.01)\n        df_bullish.iloc[-1, df_bullish.columns.get_loc('Low')] = min(df_bullish.iloc[-1]['Low'], resistance_zone[1] * 1.01)\n        \n        # Simulate bearish breakdown\n        df_bearish.iloc[-1, df_bearish.columns.get_loc('Close')] = support_zone[0] * 0.99\n        df_bearish.iloc[-1, df_bearish.columns.get_loc('High')] = max(df_bearish.iloc[-1]['High'], support_zone[0] * 0.99)\n        df_bearish.iloc[-1, df_bearish.columns.get_loc('Low')] = min(df_bearish.iloc[-1]['Low'], support_zone[0] * 0.99)\n        \n        # Calculate indicators for simulations\n        rsi_bull = ta.momentum.RSIIndicator(df_bullish['Close']).rsi().iloc[-1]\n        stoch_bull = ta.momentum.StochasticOscillator(df_bullish['High'], df_bullish['Low'], df_bullish['Close']).stoch().iloc[-1]\n        rsi_bear = ta.momentum.RSIIndicator(df_bearish['Close']).rsi().iloc[-1]\n        stoch_bear = ta.momentum.StochasticOscillator(df_bearish['High'], df_bearish['Low'], df_bearish['Close']).stoch().iloc[-1]\n        \n        # Determine simulated signals (adjusted thresholds)\n        bullish_signal = \"BUY\" if rsi_bull > 52 and stoch_bull > 45 else \"NO SIGNAL\"\n        bearish_signal = \"SELL\" if rsi_bear < 48 and stoch_bear < 55 else \"NO SIGNAL\"\n        \n        # Calculate simulated TP/SL\n        bull_tp = resistance_zone[1] * 1.03 if bullish_signal == \"BUY\" else \"N/A\"\n        bull_sl = current_price * 0.98 if bullish_signal == \"BUY\" else \"N/A\"\n        bear_tp = support_zone[0] * 0.97 if bearish_signal == \"SELL\" else \"N/A\"\n        bear_sl = current_price * 1.02 if bearish_signal == \"SELL\" else \"N/A\"\n        \n        # Enhance with forecast data\n        if bullish_signal == \"BUY\" or bearish_signal == \"SELL\":\n            forecast = forecast_prices(df, periods=30)\n            if forecast is not None:\n                if bullish_signal == \"BUY\":\n                    bull_tp = max(float(forecast['yhat'].quantile(0.75)), resistance_zone[1] * 1.03)\n                if bearish_signal == \"SELL\":\n                    bear_tp = min(float(forecast['yhat'].quantile(0.25)), support_zone[0] * 0.97)\n        \n        # Format breakout analysis\n        bull_tp_str = format_price(bull_tp, df['Close'].iloc[-1])\n        bull_sl_str = format_price(bull_sl, df['Close'].iloc[-1])\n        bear_tp_str = format_price(bear_tp, df['Close'].iloc[-1])\n        bear_sl_str = format_price(bear_sl, df['Close'].iloc[-1])\n        \n        breakout_summary = (\n            f\"\\n*🔮 HYPOTHETICAL BREAKOUT SCENARIOS $Dynamic Prediction$*\\n\"\n            f\"*📈 Bullish Breakout → If price breaks above resistance {format_price(resistance_zone[1], df['Close'].iloc[-1])}*\\n\"\n            f\"```\\n\"\n            f\"{'Metric':<12} {'Value':<15}\\n\"\n            f\"{'RSI':<12} {format_strategy_number(rsi_bull):<15}\\n\"\n            f\"{'Stochastic':<12} {format_strategy_number(stoch_bull):<15}\\n\"\n            f\"{'Signal':<12} {bullish_signal:<15}\\n\"\n            f\"{'TP Target':<12} {bull_tp_str:<15}\\n\"\n            f\"{'SL Level':<12} {bull_sl_str:<15}\\n\"\n            f\"```\\n\"\n            f\"*📉 Bearish Breakdown → If price breaks below support {format_price(support_zone[0], df['Close'].iloc[-1])}*\\n\"\n            f\"```\\n\"\n            f\"{'Metric':<12} {'Value':<15}\\n\"\n            f\"{'RSI':<12} {format_strategy_number(rsi_bear):<15}\\n\"\n            f\"{'Stochastic':<12} {format_strategy_number(stoch_bear):<15}\\n\"\n            f\"{'Signal':<12} {bearish_signal:<15}\\n\"\n            f\"{'TP Target':<12} {bear_tp_str:<15}\\n\"\n            f\"{'SL Level':<12} {bear_sl_str:<15}\\n\"\n            f\"```\\n\"\n        )\n    \n    # Generate final message\n    final_message = (\n        f\"💎 *Premium Signal for {df.name}*\\n\"\n        f\"Status: {signal_status}\\n\"\n        f\"Current Price: {current_price_str}\\n\"\n        f\"SL: {sl_str}\\n\"\n        f\"TP: {tp_str}\\n\"\n        f\"{analysis_section}\"\n        f\"{breakout_summary}\"\n    )\n    \n    final_message = escape_markdown(final_message)\n    \n    # Generate chart\n    save_path = f\"{CHARTS_DIR}/{df.name.lower()}_chart.jpg\"\n    chart_base64 = \"\"\n    if generate_chart_snapshot(df, df.name, save_path):\n        with open(save_path, \"rb\") as image_file:\n            chart_base64 = f\"data:image/png;base64,{base64.b64encode(image_file.read()).decode('utf-8')}\"\n    \n    # Create snapshot object\n    snapshot_object = {\n        \"status\": signal_type,\n        \"current_price\": current_price,\n        \"tp\": float(tp) if tp is not None else 0,\n        \"sl\": float(sl) if sl is not None else 0,\n        \"indicators\": {\n            \"rsi\": f\"{format_strategy_number(rsi.iloc[-1])} → {rsi_trend}\",\n            \"stochastic\": f\"%K {format_strategy_number(stoch_k.iloc[-1])}, %D {format_strategy_number(stoch_d.iloc[-1])} → {stoch_trend}\",\n            \"ema\": ema_trend,\n            \"keltner\": keltner_status,\n            \"momentum\": momentum_status,\n            \"confidence\": confidence_status,\n        },\n        \"support_zone\": support_zone_str,\n        \"resistance_zone\": resistance_zone_str,\n        \"breakout\": {\n            \"bullish\": {\n                \"rsi\": f\"{format_strategy_number(rsi_bull)}\" if signal_type == \"NO SIGNAL\" else None,\n                \"stochastic\": f\"{format_strategy_number(stoch_bull)}\" if signal_type == \"NO SIGNAL\" else None,\n                \"signal\": bullish_signal if signal_type == \"NO SIGNAL\" else None,\n                \"tp\": bull_tp_str if signal_type == \"NO SIGNAL\" else None,\n                \"sl\": bull_sl_str if signal_type == \"NO SIGNAL\" else None,\n            },\n            \"bearish\": {\n                \"rsi\": f\"{format_strategy_number(rsi_bear)}\" if signal_type == \"NO SIGNAL\" else None,\n                \"stochastic\": f\"{format_strategy_number(stoch_bear)}\" if signal_type == \"NO SIGNAL\" else None,\n                \"signal\": bearish_signal if signal_type == \"NO SIGNAL\" else None,\n                \"tp\": bear_tp_str if signal_type == \"NO SIGNAL\" else None,\n                \"sl\": bear_sl_str if signal_type == \"NO SIGNAL\" else None,\n            }\n        }\n    }\n    \n    return {\n        \"signal\": signal_type,\n        \"tp\": float(tp) if tp is not None else 0,\n        \"sl\": float(sl) if sl is not None else 0,\n        \"chart_base64\": chart_base64,\n        \"snapshot\": snapshot_object,\n    }, True\n\ndef main():\n    if len(sys.argv) < 2:\n        print(json.dumps({'error': 'Trading pair is required'}))\n        sys.exit(1)\n    \n    pair = sys.argv[1].upper()\n    timeframe = sys.argv[2] if len(sys.argv) > 2 else '15m'\n    \n    try:\n        # Get CoinGecko coin ID\n        coin_id = get_coingecko_id(pair)\n        \n        # Fetch market data from CoinGecko\n        crypto_data = get_coingecko_market_data(coin_id, days=7)\n        \n        if crypto_data is None or crypto_data.empty:\n            print(json.dumps({\n                'error': f'Unable to fetch data for {pair}',\n                'pair': pair,\n                'timeframe': timeframe,\n                'message': f'Cryptocurrency not found. Tried ID: {coin_id}. Please check the symbol (e.g., PEPEUSDT, BTCUSDT, SHIBUSDT)'\n            }))\n            sys.exit(1)\n        \n        # Set the dataframe name for use in strategy\n        crypto_data.name = pair\n        \n        # Run the new comprehensive strategy\n        strategy_result, success = run_strategy(crypto_data)\n        \n        if not success:\n            print(json.dumps({\n                'error': 'Strategy analysis failed',\n                'pair': pair,\n                'timeframe': timeframe,\n                'message': strategy_result.get('snapshot', 'Unknown error')\n            }))\n            sys.exit(1)\n        \n        # Get current price data for additional info\n        price_data = get_current_price_data(coin_id)\n        current_price = price_data['current_price'] if price_data else float(crypto_data['Close'].iloc[-1])\n        price_change_24h = price_data['price_change_24h'] if price_data else None\n        \n        # Extract indicator values more safely\n        def safe_extract_rsi(rsi_str):\n            try:\n                return float(rsi_str.split(' ')[0])\n            except:\n                return None\n                \n        def safe_extract_stoch(stoch_str):\n            try:\n                parts = stoch_str.split(' ')\n                k_val = float(parts[1].replace(',', ''))\n                d_val = float(parts[3].replace(',', ''))\n                return k_val, d_val\n            except:\n                return None, None\n        \n        rsi_val = safe_extract_rsi(strategy_result['snapshot']['indicators'].get('rsi', ''))\n        stoch_k_val, stoch_d_val = safe_extract_stoch(strategy_result['snapshot']['indicators'].get('stochastic', ''))\n        \n        # Prepare response in the expected format\n        response = {\n            'pair': pair,\n            'timeframe': timeframe,\n            'timestamp': datetime.now().isoformat(),\n            'signal': strategy_result['signal'],\n            'confidence': int(strategy_result.get('confidence', 50)),\n            'reason': f\"Advanced strategy analysis with {len(crypto_data)} data points\",\n            'indicators': {\n                'rsi': rsi_val,\n                'ema_short': None,  # Not used in new strategy\n                'ema_long': None,   # Not used in new strategy\n                'stoch_k': stoch_k_val,\n                'stoch_d': stoch_d_val,\n                'macd': None,       # Available but not exposed in simple format\n                'macd_signal': None,  # Available but not exposed in simple format\n                'current_price': float(strategy_result['snapshot']['current_price'])\n            },\n            'last_price': round(float(current_price), 10),\n            'volume': int(crypto_data['Volume'].iloc[-1]) if 'Volume' in crypto_data.columns else None,\n            'price_change_24h': round(float(price_change_24h), 2) if price_change_24h else None,\n            'data_source': 'CoinGecko API + Advanced Strategy',\n            'coin_id': coin_id,\n            'strategy_details': {\n                'tp': strategy_result['tp'],\n                'sl': strategy_result['sl'],\n                'support_zone': strategy_result['snapshot']['support_zone'],\n                'resistance_zone': strategy_result['snapshot']['resistance_zone'],\n                'ema_trend': strategy_result['snapshot']['indicators']['ema'],\n                'keltner_status': strategy_result['snapshot']['indicators']['keltner'],\n                'momentum': strategy_result['snapshot']['indicators']['momentum'],\n                'confidence_level': strategy_result['snapshot']['indicators']['confidence']\n            }\n        }\n        \n        print(json.dumps(response))\n        \n    except Exception as e:\n        print(json.dumps({'error': f'Analysis failed: {str(e)}'}), file=sys.stderr)\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()","size_bytes":31825},"python_backend/app.py":{"content":"from flask import Flask, jsonify, request\nfrom flask_cors import CORS\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport ta\nfrom datetime import datetime, timedelta\nimport warnings\nwarnings.filterwarnings('ignore')\n\napp = Flask(__name__)\nCORS(app)  # Enable CORS for frontend communication\n\nclass TechnicalAnalyzer:\n    def __init__(self):\n        self.timeframe_map = {\n            '1m': '1m',\n            '5m': '5m', \n            '15m': '15m',\n            '1h': '1h',\n            '4h': '4h',\n            '1d': '1d',\n            '1w': '1wk'\n        }\n    \n    def get_crypto_data(self, symbol: str, timeframe: str = '15m', period: str = '5d'):\n        \"\"\"Fetch crypto data from Yahoo Finance\"\"\"\n        try:\n            # Convert trading pair to Yahoo Finance format\n            if not symbol.endswith('-USD'):\n                symbol = symbol.replace('USDT', '-USD').replace('BUSD', '-USD')\n            \n            ticker = yf.Ticker(symbol)\n            interval = self.timeframe_map.get(timeframe, '15m')\n            \n            # Get historical data\n            data = ticker.history(period=period, interval=interval)\n            \n            if data.empty:\n                return None\n                \n            return data\n            \n        except Exception as e:\n            print(f\"Error fetching data for {symbol}: {e}\")\n            return None\n    \n    def calculate_rsi(self, data: pd.DataFrame, period: int = 14) -> pd.Series:\n        \"\"\"Calculate RSI indicator\"\"\"\n        from ta.momentum import RSIIndicator\n        return RSIIndicator(data['Close'], window=period).rsi()\n    \n    def calculate_ema(self, data: pd.DataFrame, short_period: int = 12, long_period: int = 26) -> dict:\n        \"\"\"Calculate EMA indicators\"\"\"\n        from ta.trend import EMAIndicator\n        ema_short = EMAIndicator(data['Close'], window=short_period).ema_indicator()\n        ema_long = EMAIndicator(data['Close'], window=long_period).ema_indicator()\n        \n        return {\n            'ema_short': ema_short,\n            'ema_long': ema_long,\n            'ema_diff': ema_short - ema_long\n        }\n    \n    def calculate_stochastic(self, data: pd.DataFrame, k_period: int = 14, d_period: int = 3) -> dict:\n        \"\"\"Calculate Stochastic oscillator\"\"\"\n        from ta.momentum import StochasticOscillator\n        stoch = StochasticOscillator(\n            high=data['High'], \n            low=data['Low'], \n            close=data['Close'],\n            window=k_period,\n            smooth_window=d_period\n        )\n        \n        return {\n            'stoch_k': stoch.stoch(),\n            'stoch_d': stoch.stoch_signal()\n        }\n    \n    def calculate_macd(self, data: pd.DataFrame) -> dict:\n        \"\"\"Calculate MACD indicator\"\"\"\n        from ta.trend import MACD\n        macd = MACD(data['Close'])\n        \n        return {\n            'macd': macd.macd(),\n            'macd_signal': macd.macd_signal(),\n            'macd_diff': macd.macd_diff()\n        }\n    \n    def calculate_bollinger_bands(self, data: pd.DataFrame, period: int = 20) -> dict:\n        \"\"\"Calculate Bollinger Bands\"\"\"\n        from ta.volatility import BollingerBands\n        bb = BollingerBands(data['Close'], window=period)\n        \n        return {\n            'bb_upper': bb.bollinger_hband(),\n            'bb_middle': bb.bollinger_mavg(),\n            'bb_lower': bb.bollinger_lband()\n        }\n    \n    def generate_signal(self, data: pd.DataFrame) -> dict:\n        \"\"\"Generate trading signal based on technical indicators\"\"\"\n        if len(data) < 50:  # Need enough data for analysis\n            return {\n                'signal': 'HOLD',\n                'confidence': 0,\n                'reason': 'Insufficient data for analysis'\n            }\n        \n        # Calculate indicators\n        rsi = self.calculate_rsi(data)\n        ema = self.calculate_ema(data)\n        stoch = self.calculate_stochastic(data)\n        macd = self.calculate_macd(data)\n        bb = self.calculate_bollinger_bands(data)\n        \n        # Get latest values\n        latest_rsi = rsi.iloc[-1] if not rsi.empty else 50\n        latest_ema_diff = ema['ema_diff'].iloc[-1] if not ema['ema_diff'].empty else 0\n        latest_stoch_k = stoch['stoch_k'].iloc[-1] if not stoch['stoch_k'].empty else 50\n        latest_stoch_d = stoch['stoch_d'].iloc[-1] if not stoch['stoch_d'].empty else 50\n        latest_macd = macd['macd'].iloc[-1] if not macd['macd'].empty else 0\n        latest_macd_signal = macd['macd_signal'].iloc[-1] if not macd['macd_signal'].empty else 0\n        \n        current_price = data['Close'].iloc[-1]\n        latest_bb_upper = bb['bb_upper'].iloc[-1] if not bb['bb_upper'].empty else current_price * 1.02\n        latest_bb_lower = bb['bb_lower'].iloc[-1] if not bb['bb_lower'].empty else current_price * 0.98\n        \n        # Signal scoring system\n        buy_signals = 0\n        sell_signals = 0\n        total_signals = 0\n        \n        # RSI Analysis (30% weight)\n        if latest_rsi < 30:  # Oversold\n            buy_signals += 3\n        elif latest_rsi > 70:  # Overbought\n            sell_signals += 3\n        elif latest_rsi < 50:\n            buy_signals += 1\n        elif latest_rsi > 50:\n            sell_signals += 1\n        total_signals += 3\n        \n        # EMA Crossover (25% weight)\n        if latest_ema_diff > 0:  # Short EMA above Long EMA\n            buy_signals += 2.5\n        else:\n            sell_signals += 2.5\n        total_signals += 2.5\n        \n        # Stochastic (20% weight)\n        if latest_stoch_k < 20 and latest_stoch_d < 20:  # Oversold\n            buy_signals += 2\n        elif latest_stoch_k > 80 and latest_stoch_d > 80:  # Overbought\n            sell_signals += 2\n        elif latest_stoch_k > latest_stoch_d:  # K above D\n            buy_signals += 1\n        else:\n            sell_signals += 1\n        total_signals += 2\n        \n        # MACD (15% weight)\n        if latest_macd > latest_macd_signal:  # MACD above signal\n            buy_signals += 1.5\n        else:\n            sell_signals += 1.5\n        total_signals += 1.5\n        \n        # Bollinger Bands (10% weight)\n        if current_price < latest_bb_lower:  # Below lower band\n            buy_signals += 1\n        elif current_price > latest_bb_upper:  # Above upper band\n            sell_signals += 1\n        total_signals += 1\n        \n        # Calculate confidence and determine signal\n        buy_confidence = (buy_signals / total_signals) * 100\n        sell_confidence = (sell_signals / total_signals) * 100\n        \n        if buy_confidence > 60:\n            signal = 'BUY'\n            confidence = int(buy_confidence)\n            reason = f\"Strong bullish indicators: RSI={latest_rsi:.1f}, EMA trend positive\"\n        elif sell_confidence > 60:\n            signal = 'SELL'\n            confidence = int(sell_confidence)\n            reason = f\"Strong bearish indicators: RSI={latest_rsi:.1f}, EMA trend negative\"\n        else:\n            signal = 'HOLD'\n            confidence = int(max(buy_confidence, sell_confidence))\n            reason = \"Mixed signals, market consolidation\"\n        \n        return {\n            'signal': signal,\n            'confidence': confidence,\n            'reason': reason,\n            'indicators': {\n                'rsi': round(latest_rsi, 2),\n                'ema_short': round(ema['ema_short'].iloc[-1], 4) if not ema['ema_short'].empty else None,\n                'ema_long': round(ema['ema_long'].iloc[-1], 4) if not ema['ema_long'].empty else None,\n                'stoch_k': round(latest_stoch_k, 2),\n                'stoch_d': round(latest_stoch_d, 2),\n                'macd': round(latest_macd, 6),\n                'macd_signal': round(latest_macd_signal, 6),\n                'current_price': round(current_price, 4)\n            }\n        }\n\n# Initialize analyzer\nanalyzer = TechnicalAnalyzer()\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})\n\n@app.route('/analyze', methods=['POST'])\ndef analyze_trading_pair():\n    \"\"\"Analyze a trading pair and return signals\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data or 'pair' not in data:\n            return jsonify({'error': 'Trading pair is required'}), 400\n        \n        pair = data['pair'].upper()\n        timeframe = data.get('timeframe', '15m')\n        \n        # Fetch crypto data\n        crypto_data = analyzer.get_crypto_data(pair, timeframe)\n        \n        if crypto_data is None or crypto_data.empty:\n            return jsonify({\n                'error': f'Unable to fetch data for {pair}',\n                'pair': pair,\n                'timeframe': timeframe\n            }), 404\n        \n        # Generate signal\n        signal_data = analyzer.generate_signal(crypto_data)\n        \n        # Prepare response\n        response = {\n            'pair': pair,\n            'timeframe': timeframe,\n            'timestamp': datetime.now().isoformat(),\n            'signal': signal_data['signal'],\n            'confidence': signal_data['confidence'],\n            'reason': signal_data['reason'],\n            'indicators': signal_data['indicators'],\n            'last_price': round(crypto_data['Close'].iloc[-1], 4),\n            'volume': int(crypto_data['Volume'].iloc[-1]) if 'Volume' in crypto_data.columns else None,\n            'price_change_24h': round(\n                ((crypto_data['Close'].iloc[-1] - crypto_data['Close'].iloc[-96]) / crypto_data['Close'].iloc[-96]) * 100, 2\n            ) if len(crypto_data) >= 96 else None\n        }\n        \n        return jsonify(response)\n        \n    except Exception as e:\n        return jsonify({'error': f'Analysis failed: {str(e)}'}), 500\n\n@app.route('/pairs', methods=['GET'])\ndef get_supported_pairs():\n    \"\"\"Get list of supported trading pairs\"\"\"\n    popular_pairs = [\n        'BTC-USD', 'ETH-USD', 'ADA-USD', 'DOT-USD', 'LINK-USD',\n        'BNB-USD', 'SOL-USD', 'MATIC-USD', 'AVAX-USD', 'LTC-USD',\n        'XRP-USD', 'ATOM-USD', 'ALGO-USD', 'VET-USD', 'FIL-USD'\n    ]\n    \n    return jsonify({\n        'pairs': popular_pairs,\n        'supported_timeframes': ['1m', '5m', '15m', '1h', '4h', '1d', '1w'],\n        'default_timeframe': '15m'\n    })\n\nif __name__ == '__main__':\n    print(\"🚀 Starting Crypto Signal Analysis API...\")\n    print(\"📊 Supported indicators: RSI, EMA, Stochastic, MACD, Bollinger Bands\")\n    print(\"💱 Ready to analyze crypto trading pairs!\")\n    app.run(host='0.0.0.0', port=5001, debug=True)","size_bytes":10542},"replit.md":{"content":"# Signal Trading Platform\n\n## Overview\n\nA professional cryptocurrency signal trading platform that provides advanced technical analysis and real-time trading signals. The application combines multiple technical indicators (RSI, EMA, Stochastic, MACD, Bollinger Bands) to generate BUY, SELL, or HOLD recommendations with confidence scores. Built with a modern full-stack architecture featuring React frontend, Express backend, Python analysis engine, and PostgreSQL database.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety and modern component patterns\n- **Vite** as the build tool for fast development and optimized production builds\n- **Tailwind CSS** with custom design system inspired by professional trading platforms (TradingView, Binance)\n- **Shadcn/ui** component library for consistent UI components with Radix UI primitives\n- **TanStack Query** for efficient server state management and caching\n- **Wouter** for lightweight client-side routing\n\n### Backend Architecture\n- **Express.js** server with TypeScript for API endpoints and middleware\n- **Modular route structure** with separation of concerns between routes and business logic\n- **In-memory storage** with interface-based design for easy database migration\n- **Python subprocess integration** for technical analysis computations\n\n### Data Analysis Engine\n- **Python Flask** microservice for cryptocurrency technical analysis\n- **yfinance** library for real-time market data from Yahoo Finance\n- **Technical Analysis (ta)** library for calculating RSI, EMA, MACD, Stochastic, and Bollinger Bands\n- **Signal generation algorithm** that combines multiple indicators with weighted scoring\n\n### Database Design\n- **Drizzle ORM** with PostgreSQL support configured for Neon database\n- **User management schema** with basic authentication structure\n- **Database migrations** managed through Drizzle Kit\n- **Connection pooling** using Neon's serverless PostgreSQL with WebSocket support\n\n### Design System\n- **Professional trading theme** with dark mode primary (inspired by TradingView)\n- **Color-coded signals**: Green for BUY, Red for SELL, Amber for HOLD\n- **Typography**: Inter font with weight variations for data hierarchy\n- **Responsive layout** with mobile-first approach\n\n### Authentication & Session Management\n- **Session-based authentication** with connect-pg-simple for PostgreSQL session storage\n- **User registration and login** with password hashing\n- **Protected routes** with authentication middleware\n\n### API Architecture\n- **RESTful endpoints** with consistent error handling\n- **Real-time analysis** via POST `/api/analyze` endpoint\n- **Cross-origin support** with CORS configuration for frontend-backend communication\n- **Error handling middleware** with structured error responses\n\n## External Dependencies\n\n### Core Technologies\n- **Neon Database**: Serverless PostgreSQL for production data storage\n- **Yahoo Finance API**: Real-time cryptocurrency market data through yfinance\n- **Google Fonts**: Inter typography for professional trading interface\n\n### Development Tools\n- **Replit Platform**: Development environment with integrated deployment\n- **Vite Dev Server**: Hot module replacement and development tooling\n- **ESBuild**: Fast JavaScript/TypeScript bundling for production\n\n### Python Analysis Stack\n- **Flask**: Lightweight web framework for analysis microservice\n- **pandas**: Data manipulation for market data processing\n- **numpy**: Numerical computations for technical indicators\n- **yfinance**: Yahoo Finance API wrapper for market data\n- **ta (Technical Analysis)**: Library for RSI, MACD, Bollinger Bands calculations\n\n### UI Component Ecosystem\n- **Radix UI**: Accessible component primitives for dropdowns, dialogs, tooltips\n- **Lucide React**: Icon library for trading and financial icons\n- **class-variance-authority**: Type-safe component variant management\n- **cmdk**: Command palette component for trading pair search","size_bytes":4059},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/staticAuth.ts":{"content":"import session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\n\n// Static credentials as per directive\nconst STATIC_CREDENTIALS = {\n  username: \"nexus_admin\",\n  password: \"Crypto$2024#Vault\"\n};\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  \n  // Provide a fallback session secret for development if not set\n  const sessionSecret = process.env.SESSION_SECRET || 'nexus-crypto-dev-session-secret-fallback-key-2024';\n  \n  // Use memory store as fallback if DATABASE_URL is not provided\n  let sessionStore;\n  if (process.env.DATABASE_URL) {\n    const pgStore = connectPg(session);\n    sessionStore = new pgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true, // Allow table creation\n      ttl: sessionTtl,\n      tableName: \"sessions\",\n    });\n  }\n  \n  return session({\n    secret: sessionSecret,\n    store: sessionStore, // Will use memory store if undefined\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development, true for production\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  // Login endpoint with static credentials\n  app.post(\"/api/login\", (req, res) => {\n    const { username, password } = req.body;\n    \n    if (username === STATIC_CREDENTIALS.username && password === STATIC_CREDENTIALS.password) {\n      // Set session data\n      (req.session as any).isAuthenticated = true;\n      (req.session as any).user = {\n        id: \"nexus_admin_001\",\n        username: STATIC_CREDENTIALS.username,\n        email: \"admin@nexus.local\",\n        firstName: \"Nexus\",\n        lastName: \"Admin\",\n        profileImageUrl: null,\n        loginTime: new Date().toISOString()\n      };\n      \n      res.json({\n        success: true,\n        user: (req.session as any).user\n      });\n    } else {\n      res.status(401).json({ \n        success: false, \n        message: \"Invalid credentials\" \n      });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ success: true, message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/user\", (req, res) => {\n    if ((req.session as any)?.isAuthenticated) {\n      res.json((req.session as any).user);\n    } else {\n      res.status(401).json({ message: \"Unauthorized\" });\n    }\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if ((req.session as any)?.isAuthenticated) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":2864},"python_backend/analyze_pair_dev.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nDevelopment/mock version of analyze_pair.py that doesn't require internet access.\nThis generates realistic technical analysis data for testing purposes.\n\"\"\"\nimport sys\nimport json\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef generate_mock_ohlc_data(days=7):\n    \"\"\"Generate realistic OHLC data for testing\"\"\"\n    # Start with a base price around Bitcoin's typical range\n    base_price = 45000.0\n    \n    # Generate timestamps\n    end_time = datetime.now()\n    start_time = end_time - timedelta(days=days)\n    \n    # Generate hourly data points\n    hours = days * 24\n    timestamps = [start_time + timedelta(hours=i) for i in range(hours)]\n    \n    data = []\n    current_price = base_price\n    \n    for ts in timestamps:\n        # Simulate price movements with some volatility\n        price_change_pct = np.random.normal(0, 0.02)  # 2% std volatility\n        new_price = current_price * (1 + price_change_pct)\n        \n        # Generate OHLC\n        volatility = abs(price_change_pct) * current_price * 0.5\n        \n        open_price = current_price\n        close_price = new_price\n        high_price = max(open_price, close_price) + np.random.uniform(0, volatility)\n        low_price = min(open_price, close_price) - np.random.uniform(0, volatility)\n        \n        volume = np.random.uniform(100000, 1000000)\n        \n        data.append({\n            'timestamp': ts,\n            'Open': open_price,\n            'High': high_price,\n            'Low': low_price,\n            'Close': close_price,\n            'Volume': volume\n        })\n        \n        current_price = new_price\n    \n    df = pd.DataFrame(data)\n    df.set_index('timestamp', inplace=True)\n    \n    return df[['Open', 'High', 'Low', 'Close', 'Volume']]\n\ndef calculate_indicators(data):\n    \"\"\"Calculate technical indicators using mock data\"\"\"\n    try:\n        # Simple moving averages for EMA simulation\n        ema_short = data['Close'].rolling(window=12).mean()\n        ema_long = data['Close'].rolling(window=26).mean()\n        \n        # Simple RSI calculation\n        delta = data['Close'].diff()\n        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()\n        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()\n        rs = gain / loss\n        rsi = 100 - (100 / (1 + rs))\n        \n        # Simple Stochastic\n        low_14 = data['Low'].rolling(window=14).min()\n        high_14 = data['High'].rolling(window=14).max()\n        stoch_k = 100 * ((data['Close'] - low_14) / (high_14 - low_14))\n        stoch_d = stoch_k.rolling(window=3).mean()\n        \n        # Simple MACD\n        macd_line = ema_short - ema_long\n        macd_signal = macd_line.rolling(window=9).mean()\n        \n        # Simple Bollinger Bands\n        bb_middle = data['Close'].rolling(window=20).mean()\n        bb_std = data['Close'].rolling(window=20).std()\n        bb_upper = bb_middle + (bb_std * 2)\n        bb_lower = bb_middle - (bb_std * 2)\n        \n        return {\n            'rsi': rsi,\n            'ema_short': ema_short,\n            'ema_long': ema_long,\n            'stoch_k': stoch_k,\n            'stoch_d': stoch_d,\n            'macd': macd_line,\n            'macd_signal': macd_signal,\n            'bb_upper': bb_upper,\n            'bb_middle': bb_middle,\n            'bb_lower': bb_lower\n        }\n    except Exception as e:\n        print(f\"Error calculating indicators: {e}\", file=sys.stderr)\n        return None\n\ndef generate_signal(data, indicators):\n    \"\"\"Generate trading signal based on technical indicators\"\"\"\n    if len(data) < 50:\n        return {\n            'signal': 'HOLD',\n            'confidence': 50,\n            'reason': 'Insufficient data for analysis',\n            'indicators': {\n                'rsi': None,\n                'ema_short': None,\n                'ema_long': None,\n                'stoch_k': None,\n                'stoch_d': None,\n                'macd': None,\n                'macd_signal': None,\n                'current_price': float(data['Close'].iloc[-1])\n            }\n        }\n    \n    try:\n        # Get latest values with safe fallbacks\n        latest_rsi = indicators['rsi'].iloc[-1] if not indicators['rsi'].empty and pd.notna(indicators['rsi'].iloc[-1]) else 50\n        \n        ema_short_val = indicators['ema_short'].iloc[-1] if not indicators['ema_short'].empty and pd.notna(indicators['ema_short'].iloc[-1]) else 0\n        ema_long_val = indicators['ema_long'].iloc[-1] if not indicators['ema_long'].empty and pd.notna(indicators['ema_long'].iloc[-1]) else 0\n        latest_ema_diff = ema_short_val - ema_long_val\n        \n        latest_stoch_k = indicators['stoch_k'].iloc[-1] if not indicators['stoch_k'].empty and pd.notna(indicators['stoch_k'].iloc[-1]) else 50\n        latest_stoch_d = indicators['stoch_d'].iloc[-1] if not indicators['stoch_d'].empty and pd.notna(indicators['stoch_d'].iloc[-1]) else 50\n        latest_macd = indicators['macd'].iloc[-1] if not indicators['macd'].empty and pd.notna(indicators['macd'].iloc[-1]) else 0\n        latest_macd_signal = indicators['macd_signal'].iloc[-1] if not indicators['macd_signal'].empty and pd.notna(indicators['macd_signal'].iloc[-1]) else 0\n        \n        current_price = float(data['Close'].iloc[-1])\n        latest_bb_upper = indicators['bb_upper'].iloc[-1] if not indicators['bb_upper'].empty and pd.notna(indicators['bb_upper'].iloc[-1]) else current_price * 1.02\n        latest_bb_lower = indicators['bb_lower'].iloc[-1] if not indicators['bb_lower'].empty and pd.notna(indicators['bb_lower'].iloc[-1]) else current_price * 0.98\n        \n        # Signal scoring system\n        buy_signals = 0\n        sell_signals = 0\n        total_signals = 0\n        \n        # RSI Analysis (30% weight)\n        if latest_rsi < 30:  # Oversold\n            buy_signals += 3\n        elif latest_rsi > 70:  # Overbought\n            sell_signals += 3\n        elif latest_rsi < 50:\n            buy_signals += 1\n        elif latest_rsi > 50:\n            sell_signals += 1\n        total_signals += 3\n        \n        # EMA Crossover (25% weight)\n        if latest_ema_diff > 0:  # Short EMA above Long EMA\n            buy_signals += 2.5\n        else:\n            sell_signals += 2.5\n        total_signals += 2.5\n        \n        # Stochastic (20% weight)\n        if latest_stoch_k < 20 and latest_stoch_d < 20:  # Oversold\n            buy_signals += 2\n        elif latest_stoch_k > 80 and latest_stoch_d > 80:  # Overbought\n            sell_signals += 2\n        elif latest_stoch_k > latest_stoch_d:  # K above D\n            buy_signals += 1\n        else:\n            sell_signals += 1\n        total_signals += 2\n        \n        # MACD (15% weight)\n        if latest_macd > latest_macd_signal:  # MACD above signal\n            buy_signals += 1.5\n        else:\n            sell_signals += 1.5\n        total_signals += 1.5\n        \n        # Bollinger Bands (10% weight)\n        if current_price < latest_bb_lower:  # Below lower band\n            buy_signals += 1\n        elif current_price > latest_bb_upper:  # Above upper band\n            sell_signals += 1\n        total_signals += 1\n        \n        # Calculate confidence and determine signal\n        buy_confidence = (buy_signals / total_signals) * 100\n        sell_confidence = (sell_signals / total_signals) * 100\n        \n        if buy_confidence > 60:\n            signal = 'BUY'\n            confidence = int(buy_confidence)\n            reason = f\"Strong bullish indicators: RSI={latest_rsi:.1f}, EMA trend positive\"\n        elif sell_confidence > 60:\n            signal = 'SELL'\n            confidence = int(sell_confidence)\n            reason = f\"Strong bearish indicators: RSI={latest_rsi:.1f}, EMA trend negative\"\n        else:\n            signal = 'HOLD'\n            confidence = int(max(buy_confidence, sell_confidence))\n            reason = \"Mixed signals, market consolidation\"\n        \n        return {\n            'signal': signal,\n            'confidence': confidence,\n            'reason': reason,\n            'indicators': {\n                'rsi': round(float(latest_rsi), 2) if pd.notna(latest_rsi) else None,\n                'ema_short': round(float(ema_short_val), 6) if pd.notna(ema_short_val) and ema_short_val != 0 else None,\n                'ema_long': round(float(ema_long_val), 6) if pd.notna(ema_long_val) and ema_long_val != 0 else None,\n                'stoch_k': round(float(latest_stoch_k), 2) if pd.notna(latest_stoch_k) else None,\n                'stoch_d': round(float(latest_stoch_d), 2) if pd.notna(latest_stoch_d) else None,\n                'macd': round(float(latest_macd), 6) if pd.notna(latest_macd) else None,\n                'macd_signal': round(float(latest_macd_signal), 6) if pd.notna(latest_macd_signal) else None,\n                'current_price': round(float(current_price), 2)\n            }\n        }\n        \n    except Exception as e:\n        print(f\"Error in generate_signal: {e}\", file=sys.stderr)\n        return {\n            'signal': 'HOLD',\n            'confidence': 50,\n            'reason': f'Analysis error: {str(e)}',\n            'indicators': {\n                'rsi': None,\n                'ema_short': None,\n                'ema_long': None,\n                'stoch_k': None,\n                'stoch_d': None,\n                'macd': None,\n                'macd_signal': None,\n                'current_price': float(data['Close'].iloc[-1])\n            }\n        }\n\ndef main():\n    if len(sys.argv) < 2:\n        print(json.dumps({'error': 'Trading pair is required'}))\n        sys.exit(1)\n    \n    pair = sys.argv[1].upper()\n    timeframe = sys.argv[2] if len(sys.argv) > 2 else '15m'\n    \n    try:\n        # Generate mock market data\n        crypto_data = generate_mock_ohlc_data(days=7)\n        \n        if crypto_data is None or crypto_data.empty:\n            print(json.dumps({\n                'error': f'Unable to generate mock data for {pair}',\n                'pair': pair,\n                'timeframe': timeframe\n            }))\n            sys.exit(1)\n        \n        # Calculate indicators\n        indicators = calculate_indicators(crypto_data)\n        \n        if indicators is None:\n            print(json.dumps({\n                'error': 'Failed to calculate technical indicators',\n                'pair': pair,\n                'message': 'Insufficient data for technical analysis'\n            }))\n            sys.exit(1)\n        \n        # Generate signal\n        signal_data = generate_signal(crypto_data, indicators)\n        \n        # Get current price (last price from mock data)\n        current_price = float(crypto_data['Close'].iloc[-1])\n        \n        # Simulate 24h price change\n        price_24h_ago = float(crypto_data['Close'].iloc[-24]) if len(crypto_data) >= 24 else current_price\n        price_change_24h = ((current_price - price_24h_ago) / price_24h_ago) * 100\n        \n        # Prepare response\n        response = {\n            'pair': pair,\n            'timeframe': timeframe,\n            'timestamp': datetime.now().isoformat(),\n            'signal': signal_data['signal'],\n            'confidence': signal_data['confidence'],\n            'reason': signal_data['reason'],\n            'indicators': signal_data['indicators'],\n            'last_price': round(float(current_price), 2),\n            'volume': int(crypto_data['Volume'].iloc[-1]) if 'Volume' in crypto_data.columns else None,\n            'price_change_24h': round(float(price_change_24h), 2),\n            'data_source': 'Mock Data (Development Mode)',\n            'note': 'This is simulated data for testing purposes'\n        }\n        \n        print(json.dumps(response))\n        \n    except Exception as e:\n        print(json.dumps({'error': f'Analysis failed: {str(e)}'}), file=sys.stderr)\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()","size_bytes":11867},"server/cryptoService.ts":{"content":"import { spawn } from \"child_process\";\nimport path from \"path\";\n\n// Rate limiting and caching for crypto API calls\ninterface CacheEntry {\n  data: any;\n  timestamp: number;\n}\n\nclass CryptoService {\n  private cache = new Map<string, CacheEntry>();\n  private retryDelay = 1000; // Start with 1 second\n  private readonly CACHE_TTL = 30000; // 30 seconds cache as per directive\n  private readonly MAX_RETRY_DELAY = 60000; // 60 seconds max\n  private readonly BACKOFF_FACTOR = 2;\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private async fetchWithRateLimit(url: string, options: RequestInit = {}): Promise<any> {\n    const cacheKey = url;\n    const now = Date.now();\n    \n    // Check cache (30-second cache as per directive)\n    const cached = this.cache.get(cacheKey);\n    if (cached && (now - cached.timestamp) < this.CACHE_TTL) {\n      return cached.data;\n    }\n\n    try {\n      const response = await fetch(url, options);\n      \n      if (response.status === 429) {\n        // HTTP 429 - Too Many Requests\n        console.warn(`Rate limited on ${url}, waiting ${this.retryDelay}ms`);\n        await this.sleep(this.retryDelay);\n        \n        // Exponential backoff: max 60s, factor 2\n        this.retryDelay = Math.min(this.retryDelay * this.BACKOFF_FACTOR, this.MAX_RETRY_DELAY);\n        \n        // Retry the request\n        return this.fetchWithRateLimit(url, options);\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      // Cache successful response\n      this.cache.set(cacheKey, { data, timestamp: now });\n      \n      // Reset retry delay on success\n      this.retryDelay = 1000;\n      \n      return data;\n    } catch (error) {\n      console.error('Crypto API fetch error:', error);\n      throw error;\n    }\n  }\n\n  // CoinGecko API methods (primary API as per directive)\n  async getCurrentPrice(cryptoIds: string[]): Promise<any> {\n    const idsParam = cryptoIds.join(',');\n    const url = `https://api.coingecko.com/api/v3/simple/price?ids=${idsParam}&vs_currencies=usd&include_24hr_change=true&include_24hr_vol=true&include_last_updated_at=true`;\n    \n    try {\n      return await this.fetchWithRateLimit(url);\n    } catch (error) {\n      console.error('Error fetching current prices:', error);\n      \n      // Fallback to Binance API (secondary as per directive)\n      return this.getBinanceFallbackPrices(cryptoIds);\n    }\n  }\n\n  async getHistoricalData(cryptoId: string, days: number = 7): Promise<any> {\n    const url = `https://api.coingecko.com/api/v3/coins/${cryptoId}/ohlc?vs_currency=usd&days=${days}&precision=2`;\n    \n    try {\n      return await this.fetchWithRateLimit(url);\n    } catch (error) {\n      console.error('Error fetching historical data:', error);\n      throw error;\n    }\n  }\n\n  // Binance API fallback (secondary API as per directive)\n  private async getBinanceFallbackPrices(cryptoIds: string[]): Promise<any> {\n    console.log('Falling back to Binance API for price data');\n    \n    // Simple price fetch from Binance - limited symbols\n    const binanceSymbols = {\n      'bitcoin': 'BTCUSDT',\n      'ethereum': 'ETHUSDT',\n      'binancecoin': 'BNBUSDT',\n      'cardano': 'ADAUSDT',\n      'polkadot': 'DOTUSDT',\n      'chainlink': 'LINKUSDT',\n      'matic-network': 'MATICUSDT'\n    };\n\n    const fallbackData: any = {};\n    \n    for (const cryptoId of cryptoIds) {\n      const symbol = binanceSymbols[cryptoId as keyof typeof binanceSymbols];\n      if (symbol) {\n        try {\n          const url = `https://api.binance.com/api/v3/ticker/24hr?symbol=${symbol}`;\n          const data = await this.fetchWithRateLimit(url);\n          \n          fallbackData[cryptoId] = {\n            usd: parseFloat(data.lastPrice),\n            usd_24h_change: parseFloat(data.priceChangePercent),\n            usd_24h_vol: parseFloat(data.volume) * parseFloat(data.lastPrice),\n            last_updated_at: Math.floor(Date.now() / 1000)\n          };\n        } catch (error) {\n          console.error(`Binance fallback failed for ${symbol}:`, error);\n        }\n      }\n    }\n    \n    return fallbackData;\n  }\n\n  // Enhanced signal analysis with caching\n  async analyzeSignal(pair: string, timeframe: string = '15m'): Promise<any> {\n    const cacheKey = `signal_${pair}_${timeframe}`;\n    const now = Date.now();\n    \n    // Check cache for signal analysis (shorter cache for signals - 60 seconds)\n    const cached = this.cache.get(cacheKey);\n    if (cached && (now - cached.timestamp) < 60000) {\n      return cached.data;\n    }\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Try production Python analysis script first\n        const pythonScript = path.join(process.cwd(), 'python_backend', 'analyze_pair.py');\n        const python = spawn('python3', [pythonScript, pair, timeframe]);\n        \n        let output = '';\n        let errorOutput = '';\n        \n        python.stdout.on('data', (data) => {\n          output += data.toString();\n        });\n        \n        python.stderr.on('data', (data) => {\n          errorOutput += data.toString();\n        });\n        \n        python.on('close', (code) => {\n          if (code !== 0) {\n            console.warn('Production analysis failed, falling back to development mode:', errorOutput);\n            \n            // Fallback to development mock analysis\n            this.analyzeSignalDev(pair, timeframe).then(resolve).catch(reject);\n            return;\n          }\n          \n          try {\n            const result = JSON.parse(output);\n            \n            // Cache the result\n            this.cache.set(cacheKey, { data: result, timestamp: now });\n            \n            resolve(result);\n          } catch (parseError) {\n            console.error('Failed to parse Python output:', output);\n            // Fallback to development mock analysis\n            this.analyzeSignalDev(pair, timeframe).then(resolve).catch(reject);\n          }\n        });\n        \n      } catch (error) {\n        console.error('Signal analysis error:', error);\n        // Fallback to development mock analysis\n        this.analyzeSignalDev(pair, timeframe).then(resolve).catch(reject);\n      }\n    });\n  }\n\n  // Development fallback signal analysis\n  private async analyzeSignalDev(pair: string, timeframe: string = '15m'): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        // Call development Python analysis script\n        const pythonScript = path.join(process.cwd(), 'python_backend', 'analyze_pair_dev.py');\n        const python = spawn('python3', [pythonScript, pair, timeframe]);\n        \n        let output = '';\n        let errorOutput = '';\n        \n        python.stdout.on('data', (data) => {\n          output += data.toString();\n        });\n        \n        python.stderr.on('data', (data) => {\n          errorOutput += data.toString();\n        });\n        \n        python.on('close', (code) => {\n          if (code !== 0) {\n            console.error('Development analysis also failed:', errorOutput);\n            reject(new Error(`Analysis failed: ${errorOutput}`));\n            return;\n          }\n          \n          try {\n            const result = JSON.parse(output);\n            resolve(result);\n          } catch (parseError) {\n            console.error('Failed to parse development Python output:', output);\n            reject(new Error('Failed to parse analysis result'));\n          }\n        });\n        \n      } catch (error) {\n        console.error('Development signal analysis error:', error);\n        reject(error);\n      }\n    });\n  }\n\n  // WebSocket connection pooling (placeholder for future enhancement)\n  setupWebSocketConnections(): void {\n    console.log('WebSocket connection pooling initialized');\n    // TODO: Implement Binance WebSocket streams for real-time price updates\n    // This would stream live price data for the 7 supported crypto pairs\n  }\n\n  // Clean up old cache entries\n  cleanupCache(): void {\n    const now = Date.now();\n    this.cache.forEach((entry, key) => {\n      if (now - entry.timestamp > this.CACHE_TTL * 2) {\n        this.cache.delete(key);\n      }\n    });\n  }\n\n  // Get cache statistics for monitoring\n  getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys())\n    };\n  }\n}\n\n// Export singleton instance\nexport const cryptoService = new CryptoService();\n\n// Set up periodic cache cleanup\nsetInterval(() => {\n  cryptoService.cleanupCache();\n}, 60000); // Clean every minute","size_bytes":8617},"client/src/components/ErrorBoundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Error boundary caught an error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <Card className=\"w-full max-w-md mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-destructive\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Something went wrong\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-sm text-muted-foreground\">\n              {this.state.error?.message || 'An unexpected error occurred'}\n            </div>\n            <Button \n              onClick={() => {\n                this.setState({ hasError: false, error: undefined });\n                window.location.reload();\n              }}\n              className=\"w-full\"\n              variant=\"outline\"\n            >\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Try Again\n            </Button>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":1826},"client/src/components/LoadingSkeleton.tsx":{"content":"import { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\n\ninterface LoadingSkeletonProps {\n  type?: 'chart' | 'signal' | 'dashboard';\n}\n\nexport function LoadingSkeleton({ type = 'chart' }: LoadingSkeletonProps) {\n  if (type === 'chart') {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-6 w-48\" />\n            <div className=\"flex gap-2\">\n              <Skeleton className=\"h-6 w-20\" />\n              <Skeleton className=\"h-8 w-8\" />\n            </div>\n          </div>\n          <div className=\"flex flex-wrap gap-2 mt-4\">\n            {Array.from({ length: 7 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-8 w-20\" />\n            ))}\n          </div>\n          <div className=\"flex items-center gap-4 pt-2\">\n            <div>\n              <Skeleton className=\"h-8 w-32 mb-1\" />\n              <Skeleton className=\"h-4 w-24\" />\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Skeleton className=\"h-5 w-5\" />\n              <Skeleton className=\"h-6 w-16\" />\n            </div>\n            <div>\n              <Skeleton className=\"h-4 w-16 mb-1\" />\n              <Skeleton className=\"h-4 w-20\" />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-[200px] w-full rounded-lg\" />\n            <div className=\"flex justify-between text-xs\">\n              <Skeleton className=\"h-3 w-16\" />\n              <Skeleton className=\"h-3 w-16\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (type === 'signal') {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-6 w-32\" />\n            <Skeleton className=\"h-4 w-24\" />\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Skeleton className=\"h-4 w-20 mb-2\" />\n              <Skeleton className=\"h-8 w-28\" />\n            </div>\n            <div>\n              <Skeleton className=\"h-4 w-16 mb-2\" />\n              <Skeleton className=\"h-8 w-24\" />\n            </div>\n          </div>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-4 rounded-lg border\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-3 w-32\" />\n                </div>\n                <div className=\"text-right space-y-1\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-4 w-12\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Dashboard skeleton\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"flex items-center gap-3 p-6\">\n              <Skeleton className=\"h-8 w-8\" />\n              <div>\n                <Skeleton className=\"h-6 w-12 mb-1\" />\n                <Skeleton className=\"h-4 w-20\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      <Skeleton className=\"h-[400px] w-full rounded-lg\" />\n    </div>\n  );\n}","size_bytes":3664},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle, Eye, EyeOff } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface LoginFormProps {\n  onBack?: () => void;\n}\n\nexport default function LoginForm({ onBack }: LoginFormProps) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const { login, isLoading, error } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!username.trim() || !password.trim()) {\n      return;\n    }\n\n    const success = await login({ username: username.trim(), password });\n    if (success) {\n      // Authentication successful - App.tsx will handle the redirect\n      // due to the isAuthenticated state change\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md mx-auto shadow-2xl border-0 bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-2xl font-bold\">Welcome Back</CardTitle>\n          <CardDescription>\n            Sign in to access your trading dashboard\n          </CardDescription>\n        </CardHeader>\n        \n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\" className=\"mb-4\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Enter your username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                disabled={isLoading}\n                required\n                autoComplete=\"username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  disabled={isLoading}\n                  required\n                  autoComplete=\"current-password\"\n                  className=\"pr-10\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  disabled={isLoading}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                  <span className=\"sr-only\">\n                    {showPassword ? \"Hide password\" : \"Show password\"}\n                  </span>\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"bg-blue-50 dark:bg-blue-950/50 p-3 rounded-lg border border-blue-200 dark:border-blue-800\">\n              <p className=\"text-sm text-blue-700 dark:text-blue-300 font-medium mb-1\">\n                Demo Credentials:\n              </p>\n              <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n                Username: <strong>nexus_admin</strong>\n              </p>\n              <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n                Password: <strong>Crypto$2024#Vault</strong>\n              </p>\n            </div>\n          </CardContent>\n          \n          <CardFooter className=\"flex flex-col space-y-3\">\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading || !username.trim() || !password.trim()}\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n            \n            {onBack && (\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"w-full\" \n                onClick={onBack}\n                disabled={isLoading}\n              >\n                Back to Home\n              </Button>\n            )}\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}","size_bytes":5193},"client/src/components/SimpleCryptoChart.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { TrendingUp, TrendingDown, BarChart3, RefreshCw } from 'lucide-react';\n\ninterface PriceData {\n  price: number;\n  change24h: number;\n  volume24h: number;\n  timestamp: number;\n}\n\ninterface PricePoint {\n  time: string;\n  price: number;\n  change: number;\n}\n\n// Crypto symbols to support (all vs USDT as per directive)\nconst CRYPTO_SYMBOLS = [\n  { id: 'bitcoin', symbol: 'BTCUSDT', name: 'Bitcoin', coingecko_id: 'bitcoin' },\n  { id: 'ethereum', symbol: 'ETHUSDT', name: 'Ethereum', coingecko_id: 'ethereum' },\n  { id: 'binancecoin', symbol: 'BNBUSDT', name: 'BNB', coingecko_id: 'binancecoin' },\n  { id: 'cardano', symbol: 'ADAUSDT', name: 'Cardano', coingecko_id: 'cardano' },\n  { id: 'polkadot', symbol: 'DOTUSDT', name: 'Polkadot', coingecko_id: 'polkadot' },\n  { id: 'chainlink', symbol: 'LINKUSDT', name: 'Chainlink', coingecko_id: 'chainlink' },\n  { id: 'matic-network', symbol: 'MATICUSDT', name: 'Polygon', coingecko_id: 'matic-network' },\n];\n\ninterface SimpleCryptoChartProps {\n  symbol?: string;\n  onSymbolChange?: (symbol: string) => void;\n}\n\nexport default function SimpleCryptoChart({ symbol = 'BTCUSDT', onSymbolChange }: SimpleCryptoChartProps) {\n  const [currentPrice, setCurrentPrice] = useState<PriceData | null>(null);\n  const [priceHistory, setPriceHistory] = useState<PricePoint[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n\n  // Get crypto config for current symbol\n  const currentCrypto = CRYPTO_SYMBOLS.find(crypto => crypto.symbol === symbol) || CRYPTO_SYMBOLS[0];\n\n  // Rate limiting and caching now handled by backend proxy\n\n  // Fetch current price data via backend proxy (fixed architecture issue)\n  const fetchCurrentPrice = async (cryptoId: string): Promise<PriceData> => {\n    try {\n      const response = await fetch(`/api/crypto/prices?ids=${cryptoId}`, {\n        credentials: 'include' // Important for session authentication\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      const coinData = data[cryptoId];\n      \n      return {\n        price: coinData.usd,\n        change24h: coinData.usd_24h_change || 0,\n        volume24h: coinData.usd_24h_vol || 0,\n        timestamp: coinData.last_updated_at || Math.floor(Date.now() / 1000)\n      };\n    } catch (error) {\n      console.error('Error fetching current price:', error);\n      throw error;\n    }\n  };\n\n  // Load initial data and set up real-time updates\n  useEffect(() => {\n    let priceUpdateInterval: NodeJS.Timeout;\n\n    const loadData = async () => {\n      setIsLoading(true);\n      setError(null);\n      setPriceHistory([]); // Reset history for new symbol\n\n      try {\n        // Get initial current price\n        const priceData = await fetchCurrentPrice(currentCrypto.coingecko_id);\n        setCurrentPrice(priceData);\n        setLastUpdate(new Date());\n\n        // Add to history\n        const initialPoint: PricePoint = {\n          time: new Date().toLocaleTimeString(),\n          price: priceData.price,\n          change: priceData.change24h\n        };\n        setPriceHistory([initialPoint]);\n\n        // Set up 5-second price updates (as per directive)\n        priceUpdateInterval = setInterval(async () => {\n          try {\n            const newPriceData = await fetchCurrentPrice(currentCrypto.coingecko_id);\n            const oldPrice = currentPrice?.price || newPriceData.price;\n            const priceChange = ((newPriceData.price - oldPrice) / oldPrice) * 100;\n\n            setCurrentPrice(newPriceData);\n            setLastUpdate(new Date());\n\n            // Add to price history (keep last 20 points for simple chart)\n            const newPoint: PricePoint = {\n              time: new Date().toLocaleTimeString(),\n              price: newPriceData.price,\n              change: priceChange\n            };\n\n            setPriceHistory(prev => {\n              const updated = [...prev, newPoint];\n              return updated.slice(-20); // Keep last 20 points\n            });\n\n          } catch (error) {\n            console.error('Error updating price:', error);\n          }\n        }, 5000); // 5-second updates\n\n      } catch (error) {\n        console.error('Error loading price data:', error);\n        setError(error instanceof Error ? error.message : 'Failed to load price data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n\n    return () => {\n      if (priceUpdateInterval) {\n        clearInterval(priceUpdateInterval);\n      }\n    };\n  }, [currentCrypto.coingecko_id]);\n\n  const handleSymbolChange = (newSymbol: string) => {\n    if (onSymbolChange) {\n      onSymbolChange(newSymbol);\n    }\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 8,\n    }).format(price);\n  };\n\n  const formatPercentage = (change: number) => {\n    return `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;\n  };\n\n  // Simple ASCII-style price chart\n  const renderSimpleChart = () => {\n    if (priceHistory.length < 2) return null;\n\n    const maxPrice = Math.max(...priceHistory.map(p => p.price));\n    const minPrice = Math.min(...priceHistory.map(p => p.price));\n    const priceRange = maxPrice - minPrice;\n\n    return (\n      <div className=\"mt-4 p-4 bg-muted/50 rounded-lg\">\n        <div className=\"text-sm text-muted-foreground mb-2\">Real-time Price Chart (5-second updates)</div>\n        <div className=\"grid grid-cols-10 gap-1 h-20\">\n          {priceHistory.slice(-10).map((point, index) => {\n            const height = priceRange > 0 ? ((point.price - minPrice) / priceRange) * 100 : 50;\n            const isPositive = point.change >= 0;\n            \n            return (\n              <div key={index} className=\"flex flex-col justify-end\">\n                <div \n                  className={`w-full rounded-sm ${isPositive ? 'bg-green-500' : 'bg-red-500'}`}\n                  style={{ height: `${Math.max(height, 5)}%` }}\n                  title={`${point.time}: ${formatPrice(point.price)} (${formatPercentage(point.change)})`}\n                />\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n          <span>{formatPrice(minPrice)}</span>\n          <span>{formatPrice(maxPrice)}</span>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Real-Time Crypto Chart\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            {lastUpdate && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Updated: {lastUpdate.toLocaleTimeString()}\n              </Badge>\n            )}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => window.location.reload()}\n              disabled={isLoading}\n            >\n              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n            </Button>\n          </div>\n        </div>\n        \n        {/* Symbol selector */}\n        <div className=\"flex flex-wrap gap-2\">\n          {CRYPTO_SYMBOLS.map((crypto) => (\n            <Button\n              key={crypto.id}\n              variant={crypto.symbol === symbol ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => handleSymbolChange(crypto.symbol)}\n              className=\"text-xs\"\n            >\n              {crypto.name}\n            </Button>\n          ))}\n        </div>\n\n        {/* Current price display */}\n        {currentPrice && (\n          <div className=\"flex items-center gap-4 pt-2\">\n            <div>\n              <div className=\"text-3xl font-bold font-mono\">\n                {formatPrice(currentPrice.price)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">{currentCrypto.name} / USDT</div>\n            </div>\n            <div className={`flex items-center gap-1 ${\n              currentPrice.change24h >= 0 ? 'text-green-500' : 'text-red-500'\n            }`}>\n              {currentPrice.change24h >= 0 ? \n                <TrendingUp className=\"h-5 w-5\" /> : \n                <TrendingDown className=\"h-5 w-5\" />\n              }\n              <span className=\"font-medium text-lg\">\n                {formatPercentage(currentPrice.change24h)}\n              </span>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              <div>Volume 24h:</div>\n              <div className=\"font-mono\">\n                {new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD',\n                  notation: 'compact',\n                  compactDisplay: 'short'\n                }).format(currentPrice.volume24h)}\n              </div>\n            </div>\n          </div>\n        )}\n      </CardHeader>\n      \n      <CardContent>\n        {error ? (\n          <div className=\"flex items-center justify-center h-[200px] text-red-500\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-medium\">Chart Error</div>\n              <div className=\"text-sm\">{error}</div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"mt-2\"\n                onClick={() => window.location.reload()}\n              >\n                Retry\n              </Button>\n            </div>\n          </div>\n        ) : isLoading ? (\n          <div className=\"flex items-center justify-center h-[200px]\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <div className=\"text-muted-foreground\">Loading real-time price data...</div>\n            </div>\n          </div>\n        ) : (\n          <div>\n            {renderSimpleChart()}\n            <div className=\"mt-4 text-xs text-muted-foreground\">\n              <div className=\"flex justify-between\">\n                <span>✅ 5-second real-time updates</span>\n                <span>✅ Rate limiting with caching</span>\n              </div>\n              <div className=\"flex justify-between mt-1\">\n                <span>✅ CoinGecko API (primary)</span>\n                <span>✅ 7 crypto pairs vs USDT</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11001}},"version":1}